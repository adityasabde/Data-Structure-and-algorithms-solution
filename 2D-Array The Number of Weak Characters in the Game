You are playing a game that contains multiple characters, and each of the characters has two main properties: attack and defense. You are given a 2D integer array properties where properties[i] = [attacki, defensei] represents the properties of the ith character in the game.

A character is said to be weak if any other character has both attack and defense levels strictly greater than this character's attack and defense levels. More formally, a character i is said to be weak if there exists another character j where attackj > attacki and defensej > defensei.

Return the number of weak characters.

Input: properties = [[2,2],[3,3]]
Output: 1
Explanation: The first character is weak because the second character has a strictly greater attack and defense



class Solution {
    public int numberOfWeakCharacters(int[][] properties) {
        int n = properties.length;
        int count =0 ;
        Arrays.sort(properties,(a,b)->(a[0]==b[0]) ? Integer.compare(b[1],a[1]) : Integer.compare(a[0],b[0]));
        
        for(int i =0 ;i<n;i++){
            for(int j =0 ;j<2;j++){
            System.out.print(properties[i][j] +" " );
        }
         System.out.println();   
        }
        
        int max = properties[n-1][1];
        
        for(int i = n-2; i>=0 ;i--){
    
                  if(properties[i][1] < max  ){
                      count++;
                  }else{    
                      max = properties[i][1];
                  }
                         
        }
        return count;
    }
}




link :; https://leetcode.com/problems/the-number-of-weak-characters-in-the-game/
