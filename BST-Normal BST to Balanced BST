Given a Binary Search Tree, modify the given BST such that itis balanced and has minimum possible height.

Examples :

Input:
       30
      /
     20
    /
   10
Output:
     20
   /   \
 10     30

Input:
         4
        /
       3
      /
     2
    /
   1
Output:
      3            3           2
    /  \         /  \        /  \
   1    4   OR  2    4  OR  1    3   OR ..
    \          /                   \
     2        1                     4 








/*class Node
{
    int data;
    Node right, left;
    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/

class GfG
{
   Node buildBalancedTree(Node root) 

    {
        ArrayList<Integer> al=new ArrayList<>();

        inorderTraversal(al,root);

        Node ans=balancedBst(al,0,al.size()-1);
        return ans;
    }

    public void inorderTraversal(ArrayList<Integer> al, Node root)
    {
        if(root==null)
        {
            return;
        }
        inorderTraversal(al,root.left);

        al.add(root.data);

        inorderTraversal(al,root.right);

    }

    public Node balancedBst(ArrayList<Integer> al, int s , int e)
    {
        if(s>e)
        {
            return null;
        }

        int mid=s+(e-s)/2;

        Node root=new Node(al.get(mid));

        root.left=balancedBst(al,s,mid-1);

        root.right=balancedBst(al,mid+1,e);

        return root;
    }
}
