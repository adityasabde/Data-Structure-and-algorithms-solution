Given an array of strings words (without duplicates), return all the concatenated words in the given list of words.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.

 

Example 1:

Input: words = ["cat","cats","catsdogcats","dog","dogcatsdog","hippopotamuses","rat","ratcatdogcat"]
Output: ["catsdogcats","dogcatsdog","ratcatdogcat"]
Explanation: "catsdogcats" can be concatenated by "cats", "dog" and "cats"; 
"dogcatsdog" can be concatenated by "dog", "cats" and "dog"; 
"ratcatdogcat" can be concatenated by "rat", "cat", "dog" and "cat".
Example 2:

Input: words = ["cat","dog","catdog"]
Output: ["catdog"]





Set<String> dict;
Set <String> formedWords;
public List<String> findAllConcatenatedWordsInADict(String[] words) {
    List<String> result = new ArrayList<>();
    dict = new HashSet<>(Arrays.asList(words));
    formedWords = new HashSet<>();
    
    
    for(String word:words){
        if(canbeFormed(word)){
            result.add(word);
        }
    }
    return result;
}

public boolean canbeFormed(String s){
    if(formedWords.contains(s)) return true;
    
    for(int i = 1;i<s.length();i++){
        String s1 = s.substring(0,i);
        String s2 = s.substring(i);
        if(dict.contains(s1)){
            if(dict.contains(s2) || canbeFormed(s2)) {
                formedWords.add(s);
                return true;
            }
        }
    }
    return false;
}
