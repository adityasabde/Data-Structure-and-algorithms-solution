You are given the head of a linked list.

Remove every node which has a node with a strictly greater value anywhere to the right side of it.

Return the head of the modified linked list.

 

Example 1:


Input: head = [5,2,13,3,8]
Output: [13,8]
Explanation: The nodes that should be removed are 5, 2 and 3.
- Node 13 is to the right of node 5.
- Node 13 is to the right of node 2.
- Node 8 is to the right of node 3.


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    ListNode reverse(ListNode node)
    {
        ListNode prev = null;
        ListNode current = node;
        ListNode next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
    
    ListNode func(ListNode n){
        int prev = -1;
        ListNode temp = n;
        while(temp!= null){
             prev = temp.val;
            ListNode ab = temp.next;
            while(ab != null && prev > ab.val){
                ab = ab.next;
                // temp = temp.next;
            }
            temp.next = ab;
            temp = temp.next;
        }
        return n;
    }
    
    
    
    public ListNode removeNodes(ListNode head) {
        ListNode n = head;
        ListNode a =  reverse(n);
        ListNode b = func(a);
        return reverse(b);
    }
   
}
