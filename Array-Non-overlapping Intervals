Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104












class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        int n = intervals.length;
        
        if(n == 0) {
            return 0;
        }
        
       Arrays.sort(intervals, Comparator.comparingInt(a -> a[0]));
       
       int ans = 0;
       int prev= 0;
       
       for(int i = 1 ; i<n ; i++){
        //    overlapping
        // [1 , 5] [3 ,6] overlapping method 1

        if(intervals[i][0] < intervals[prev][1]){
            ans++;

            // [1 , 7] [2 ,4] overlapping method 2
            if(intervals[i][1] <= intervals[prev][1]){
                prev = i;
            }
        }
        else{
            prev  =  i;
        }

       }
       return ans;
    }
}
