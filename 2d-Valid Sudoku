Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


breut force

public class ValidSudoku {

    // Main Method to check the valid sudoku.
    public boolean isValidSudoku(char[][] board) {
        // Checking every number in the 'board'.
        for (int row = 0; row < 9; row++) {
            for (int column = 0; column < 9; column++) {
                // If the position is a number (!= '.'), and it is a not a valid placement, then return false.
                if (board[row][column] != '.' && !isValidPlacement(board, board[row][column], row, column))
                    return false;
            }
        }
        // If all checks succeed, then the 'board' is a valid sudoku.
        return true;
    }

    // Method to check if identical number found in the row.
    private boolean isNumberInRow(char[][] board, char number, int row, int column) {
        for (int i = 0; i < 9; i++) {
            // "column != i" to skip the current number.
            // Otherwise, check if any identical number in the row and return true if found.
            if (column != i && board[row][i] == number) return true;
        }
        // If we did not find any identical number in the row, then return false.
        return false;
    }

    private boolean isNumberInColumn(char[][] board, char number, int row, int column) {
        for (int i = 0; i < 9; i++) {
            // "row != i" to skip the current number.
            // Otherwise, check if any identical number in the column and return true if found.
            if (row != i && board[i][column] == number) return true;
        }
        // If we did not find any identical number in the column, then return false.
        return false;
    }

    private boolean isNumberInBox(char[][] board, char number, int row, int column) {
        // Here, we get the top left corner position of the box the 'number' is in,
        // because we are going to scan from top left to bottom right of the box.
        int boxRow = row - row % 3;
        int boxColumn = column - column % 3;

        // Checking just the 3 row and 3 column position in the box.
        for (int i = boxRow; i < boxRow + 3; i++) {
            for (int j = boxColumn; j < boxColumn + 3; j++) {
                // "row != i && column != j" to skip the current number.
                // Otherwise, check if any identical number in the box and return true if found.
                if (row != i && column != j && board[i][j] == number) return true;
            }
        }
        // If we did not find any identical number in the box, then return false.
        return false;
    }

    // Additional wrapper method for all three checks to make the code more readable.
    private boolean isValidPlacement(char[][] board, char number, int row, int column) {
        // If the number is not found in the row, column and the box, then it is a valid placement and return true.
        return !isNumberInRow(board, number, row, column) &&
                !isNumberInColumn(board, number, row, column) &&
                !isNumberInBox(board, number, row, column);
    }
}






class Solution {
    public boolean isValidSudoku(char[][] board) {
        Set<String> set = new HashSet<>();
        for (int row = 0; row < 9; row++) {
            for (int column = 0; column < 9; column++) {
                char number = board[row][column];
                if (number != '.') {
                    if (!set.add(number + " in row " + row) ||
                            !set.add(number + " in column " + column) ||
                            !set.add(number + " in block " + (row / 3) + "," + (column / 3)))
                        return false;
                }
            }
        }
        return true;
    }
}
