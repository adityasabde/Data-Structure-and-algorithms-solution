Given two binary strings A and B consisting of only 0s and 1s. Find the resultant string after adding the two Binary Strings.
Note: The input strings may contain leading zeros but the output string should not have any leading zeros.


Example 1:

Input:
A = "1101", B = "111"
Output: 10100
Explanation:
 1101
+ 111
10100
Example 2:

Input: 
A = "10", B = "01"
Output: 11
Explanation: 
  10
+ 01
  11

Your Ta



//User function Template for Java

class Solution {
    String addBinary(String A, String B) {
        
        java.math.BigInteger a=new java.math.BigInteger(A,2);
        java.math.BigInteger b= new java.math.BigInteger(B,2);
         a=a.add(b);
         return a.toString(2);
     
     
//      class Solution {

//     String addBinary(String A, String B) {

//       StringBuilder ans = new StringBuilder();

//       //int a = Integer.parseInt(A);

//       //int b = Integer.parseInt(B);

//       //if(a==0 && b==0)

//       //return "0";

//       int i = A.length()-1;

//       int j = B.length()-1;

//       int prevcarry = 0;

//       while(i>=0 || j>=0)

//       {

//           //System.out.println(ans);

//           int sum = 0;

//           if(i>=0 && A.charAt(i) == '1' )

//           {

//               sum++;

               

//           }

//           if(j>=0 && B.charAt(j) == '1')

//           {

//               sum++;

               

//           }

//           sum+=prevcarry;

//           char bit = '0';

//           if(sum>1)

//           {
//           prevcarry = 1;

//           }

//           else

//           prevcarry = 0;

//           if (sum == 1 || sum == 3)

//           {

//           bit = '1';

//           }

//           ans.append(bit);

//           i--;

//           j--;

//       }

//       if(prevcarry ==1)

//       ans.append('1');

//       ans.reverse();

//       //System.out.println(ans);

//       int index=-1;

//       for(int k = 0; i<ans.length(); k++)

//       {

//           if(ans.charAt(k) !='0')

//           {

//               index = k;

//               break;

//           }

//       }

//       if(index == -1)

//       return "0";

//       //System.out.println(ans.substring(index));

//       return ans.substring(index);

//     }

// }
     
        
    }
}
