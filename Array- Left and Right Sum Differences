Given a 0-indexed integer array nums, find a 0-indexed integer array answer where:

answer.length == nums.length.
answer[i] = |leftSum[i] - rightSum[i]|.
Where:

leftSum[i] is the sum of elements to the left of the index i in the array nums. If there is no such element, leftSum[i] = 0.
rightSum[i] is the sum of elements to the right of the index i in the array nums. If there is no such element, rightSum[i] = 0.
Return the array answer.

 

Example 1:

Input: nums = [10,4,8,3]
Output: [15,1,11,22]
Explanation: The array leftSum is [0,10,14,22] and the array rightSum is [15,11,3,0].
The array answer is [|0 - 15|,|10 - 11|,|14 - 3|,|22 - 0|] = [15,1,11,22].




class Solution {
    public int[] leftRigthDifference(int[] nums) {
        int left [] = new int[nums.length];
        int right [] = new int[nums.length];
        
        int n = nums.length;
        
        left[0] = 0;
        right[n-1] = 0;
        int sum = 0;
        int bsum = 0;
        
        for(int i =0 ;i<n-1 ;i++){
            sum += nums[i];
            left[i+1] = sum ;
        }
        
        for(int i = n-1 ;i > 0 ;i--){
            bsum += nums[i];
            right[i - 1] = bsum ;
        }
        
        int ans [] = new int[n];
        
        for(int i =0 ;i<n;i++){
            ans[i] =(int) Math.abs(left[i] - right[i]);
        }
        
        return ans;
    }
}
