
Given a string S consisting of only lowercase characters. Find the lexicographically smallest string after removing exactly k characters from the string. But you have to correct the value of k, i.e., if the length of the string is a power of 2, reduce k by half, else multiply k by 2. You can remove any k character.
NOTE: If it is not possible to remove k (the value of k after correction) characters or if the resulting string is empty return -1.




Input: S = "fooland", k = 2
Output: "and" 
Explanation: As the size of the string = 7
which is not a power of 2, hence k = 4.
After removing 4 characters from the given 
string, the lexicographically smallest
string is "and".



Input: S = "code", k = 4
Output: "cd"
Explanation: As the length of the string = 4, 
which is 2 to the power 2, hence k = 2.
Hence, lexicographically smallest string after 
removal of 2 characters is "cd".



class Solution {
    static String lexicographicallySmallest(String s, int k) {
      // code here
      char c[]=s.toCharArray();
        int n=c.length;
        
        if(isPower(n)){
            k/=2;
        }else{
            k*=2;
        }
        
        if(k>=n){
            return "-1";
        }
        
        Stack<Character> st=new Stack<>();
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && k>0 && st.peek()>c[i]){
                st.pop();
                k--;
            }
            st.push(c[i]);
        }
        while(k>0){
            st.pop();
            k--;
        }
        StringBuilder sb=new StringBuilder();
        while(!st.isEmpty()){
            sb.append(st.pop());
        }
       
        return sb.reverse().toString();
    }
    
    
     static boolean isPower (int n){
        if(n==2 || n==0) return false;
        while(n!=1){
            if(n%2==0){
                n/=2;
            }else{
                return false;
            }
        }
        return true;

    }
}
