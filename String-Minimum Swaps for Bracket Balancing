
You are given a string S of 2N characters consisting of N ‘[‘ brackets and N ‘]’ brackets. A string is considered balanced if it can be represented in the for S2[S1] where S1 and S2 are balanced strings. We can make an unbalanced string balanced by swapping adjacent characters. Calculate the minimum number of swaps necessary to make a string balanced.
Note - Strings S1 and S2 can be empty.

 

Example 1:

Input  : []][][
Output : 2
Explanation :
First swap: Position 3 and 4
[][]][
Second swap: Position 5 and 6
[][][]

 



//User function Template for Java
class Solution{
    static int minimumNumberOfSwaps(String s){
        int open = 0;
        int close = 0;
        int unbalanced = 0;
        int swaps = 0;
        
        for(int i=0 ;i<s.length();i++){
            if(s.charAt(i) == '['){
                open++;
                if(unbalanced > 0){
                    swaps += unbalanced;
                    unbalanced--;
                }
            }
            else{
                close++;
                unbalanced = close - open;
            }
        }
        return swaps;
        
    }
}

// example exaplanation

// []][][  
    
// 1 --->
//     open = 1
//     close= 0
//     unbalanced = 0; swaps = 0
    
// 2---> 
//     open = 1
//     close =1;
//     unbalaced = 0; swaps = 0
    
// 3-->
//     open = 1
//     close =2
//     unbalaced = 1; swaps = 0
    
// 4-->
//     open = 2
//     close = 2; 
//     unbalaced = 0 ; swaps = 1
    
// 5-->
//     open = 2
//     close = 3
//     unbalaced = 1; swaps = 1;

// 6-->
//     open = 3
//     closed = 3
//     unbalaced = 0 ; swaps = 2
    
