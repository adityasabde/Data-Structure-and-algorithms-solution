Given an integer array nums and an integer k, return the number of subarrays of nums where the greatest common divisor of the subarray's elements is k.

A subarray is a contiguous non-empty sequence of elements within an array.

The greatest common divisor of an array is the largest integer that evenly divides all the array elements.

 
 Input: nums = [9,3,1,2,6,3], k = 3
Output: 4
Explanation: The subarrays of nums where 3 is the greatest common divisor of all the subarray's elements are:
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]
- [9,3,1,2,6,3]


Input: nums = [4], k = 7
Output: 0
Explanation: There are no subarrays of nums where 7 is the greatest common divisor of all the subarray's elements.


class Solution {
    public int subarrayGCD(int[] nums, int k) {
        int n= nums.length;
        int count =0 ;
        
        ArrayList<Integer> arr = new ArrayList<>();
        
        if(n == 1){
            if(nums[0] == k){
                return 1;
            }else{
              return 0;
            }
        }
        
        int i =0 ;
        int j =0 ;
        while(i<n){
            if(nums[i]==k){
                count++;
            }
                j = i;
                j++;
                while(j<n && nums[i] % k ==0 && nums[j] % k == 0){
                    count++;
                    j++;
                }
            i++;
        }
        
       // i = 0;
       //  int count2 = 0;
       //  while(i<n){
       //     j = i+1;
       //      while(j<n && nums[i] != k && nums[i]%k == 0 && nums[i] == nums[j]){
       //          count2++;
       //          j++;
       //      }
       //      i++;
       //  }
        
        i =0 ;
        int count3 = 0;
        while(i<n){
           j = i+1;
            while(j<n && nums[i] != k && nums[i]%k == 0 &&  nums[j] % nums[i] == 0){
                count3++;
                j++;
            }
            i++;
        }

        return count -count3;
    }
}
