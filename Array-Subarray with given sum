
Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.

In case of multiple subarrays, return the subarray which comes first on moving from left to right.

 

Example 1:

Input:
N = 5, S = 12
A[] = {1,2,3,7,5}
Output: 2 4
Explanation: The sum of elements 
from 2nd position to 4th position 
is 12.
 

Example 2:

Input:
N = 10, S = 15
A[] = {1,2,3,4,5,6,7,8,9,10}
Output: 1 5
Explanation: The sum of elements 
from 1st position to 5th position
is 15.






class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
   
    
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
       
    //   brut force solution
        
        // int i =0 ; 
        // ArrayList<Integer> al = new ArrayList<>();
        // while(i<n){
        //     int j = i ; 
        //     int currsum = 0;
        //     while(j < n && currsum < s){
        //         currsum += arr[j];
        //         j++;
        //     }
            
        //     if(currsum == s){
        //         al.add(i+1);
        //         al.add(j);
        //         return al;
        //     }
            
        //     currsum -= arr[i];
        //     i++;
        // }
        
        // al.add(-1);
        // return al;
        
    // --------------------------------------------------------------------------------------
    
      // sliding window
       ArrayList<Integer> al = new ArrayList<>();
       
       int start= 0;
       int i =0 ;
       int currsum = 0;
       
       while(i<n){
           currsum += arr[i];
           while(currsum > s && start < i){
               currsum -= arr[start++];
           }
           
           if(currsum == s){
               al.add(start+1);
               al.add(i+1);
               return al;
           }
           
          i++; 
       }
       
      al.add(-1);
      return al;
        
        
        
    }
    
   
}
