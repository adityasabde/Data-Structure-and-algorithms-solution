Given a N*M grid of characters 'O', 'X', and 'Y'. Find the minimum Manhattan distance between a X and a Y.

Manhattan Distance :
| row_index_x - row_index_y | + | column_index_x - column_index_y |


Example 1:

Input:
N = 4, M = 4
grid  = {{X, O, O, O}
         {O, Y, O, Y}
         {X, X, O, O}
         {O, Y, O, O}}
Output:
1
Explanation:
{{X, O, O, O}
{O, Y, O, Y}
{X, X, O, O}
{O, Y, O, O}}
The shortest X-Y distance in the grid is 1.
One possible such X and Y are marked in bold
in the above grid.
Example 2:

Input:
N = 3, M = 3
grid = {{X, X, O}
        {O, O, Y}
        {Y, O, O}}
Output :
2
Explanation:
{{X, X, O}
 {O, O, Y}
 {Y, O, O}}
The shortest X-Y distance in the grid is 2.
One possible such X and Y are marked in bold
in the above grid.
Your Task:  
You don't need to read input or print anything. Your task is to complete the function shortestXYDist() which takes two integers N, and M and an 2D list of size N*M as input and returns the shortest Manhattan Distance between a X and a Y.

Expected Time Complexity: O(N*M)
Expected Auxiliary Space: O(N*M)












// User function Template for Java

class Solution {
    
    class Pair{
        int x ; int y ; int dist;
        Pair(int x , int y , int dist){
            this.x = x;
            this.y = y;
            this.dist = dist;
        }
    }
    
    
     int shortestXYDist(ArrayList<ArrayList<Character>> grid, int M, int N) {
            Queue<Pair> q = new LinkedList<>();
            boolean visited[][]  = new boolean[M][N];
            
            for(int i =0 ; i<M;i++){
                for(int j= 0 ; j<N ;j++){
                    if(grid.get(i).get(j) == 'X'){
                        q.add(new Pair(i , j , 0));
                        visited[i][j] = true;
                    }
                }
            }
            
            int ans = 0;
            int row [] = { 0 ,1, 0 ,-1};
            int col [] = {1 ,0, -1, 0};
            
            while(! q.isEmpty()){
                Pair curr = q.poll();
                
                int x = curr.x;
                int y = curr.y;
                int dist = curr.dist;
                
                if(grid.get(x).get(y) == 'Y'){
                    ans = dist;
                    break;
                }
                
                for(int k = 0 ;k <4;k++){
                    int newx = x + row[k];
                    int newy = y + col[k];
                    
                    if(newx >= 0 && newy >= 0 && newx < M && newy < N && !visited[newx][newy] )
                    {
                        q.add(new Pair(newx , newy , dist+ 1));
                        visited[newx][newy] = true;
                    }
                }
            }
        return ans; 
    }
};
