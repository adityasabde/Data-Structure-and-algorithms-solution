
Given a circular integer array nums of length n, return the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

 

Example 1:

Input: nums = [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3.
Example 2:

Input: nums = [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10.
Example 3:

Input: nums = [-3,-2,-3]
Output: -2
Explanation: Subarray [-2] has maximum sum -2.
 

Constraints:

n == nums.length
1 <= n <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104











class Solution {
    public int maxSubarraySumCircular(int[] nums)
     {
         if(nums.length == 0 )return 0;
         int x = kadence(nums);
         int y = 0;
         for(int i = 0; i<nums.length ; i++)
         {
             y +=  nums[i];
             nums[i] *= -1;
         }

         int z = kadence(nums);
         if(y + z == 0 ) return x;

         return Math.max(x , y+z);
    }

    public int kadence(int nums[] ){
        int max  = nums[0];
        int sum =nums[0];
        int maxsum = nums[0] ;
        for(int i = 1 ;i < nums.length ; i++)
        {
             
             maxsum =  Math.max(maxsum + nums[i] , nums[i]);

          max = Math.max(max , maxsum);
        }
           return max;
    }

}

// class Solution {
//     public int maxSubarraySumCircular(int[] nums) {
//         int n = nums.length;
//         int maxSum = nums[0], minSum = nums[0], curMax=0, curMin=0;
//         int totalSum = 0;
//         for(int num : nums){
//             curMax = Math.max(curMax + num, num);
//             maxSum = Math.max(maxSum, curMax);
//             curMin = Math.min(curMin + num, num);
//             minSum = Math.min(minSum, curMin);
//             totalSum+=num;
//         }
//         return maxSum>0? Math.max(maxSum, totalSum-minSum) : maxSum;
//     }
// }



// class Solution {
//     public int maxSubarraySumCircular(int[] nums) {
        
//         int sarr[] = new int[nums.length] ;
//         int earr[] = new int[nums.length] ;
//         int sum = nums[0] ;
//         sarr[0] = nums[0];
//         for(int i =1 ;i<nums.length ; i++)
//         {
//             sum += nums[i];
//             sarr[i] = Math.max(nums[i-1] , sum);
//         }

//         int n = nums.length;
//         int sum1 = 0 ;
//         for(int i = n-1 ; i>= 0 ;i--)
//         {
//             sum1 += nums[i];
//             earr[i] = sum1;
//         }

//         int max = Integer.MIN_VALUE;
//         for(int i =0 ;i<n;i++){
//                  System.out.println(earr[i]);
//         }
//         for(int i = 0 ;i<n;i++)
//         {
            
//             if( i == 0 || earr[i] <= 0)
//             {
//                if(earr[i] > 0 ){
//                    max = Math.max(earr[i] , max);
//                }
//                 max = Math.max(nums[i] , max);
//             }
//             else if( i> 0 && sarr[i-1] < 0 )
//             {
              
//                 if(earr[i] > 0 ){
//                     max =  Math.max(max , earr[i]);
//                 }
//                 max = Math.max(nums[i] , max);
//             }
//             else 
//             {
              
//                 max = Math.max(max ,  sarr[i-1] + earr[i]);
//                 max = Math.max(max , nums[i]);
//                 max = Math.max(sarr[i] , max);
//             }
            
//         }
//         return max;
        
        
        // int max  = nums[0] ;
        // for(int i =0 ;  i<nums.length ;i++){
        //     int sum = 0;
        //     int j = i ;
        //     while(j<nums.length)
        //     {
        //         sum += nums[j];
        //         max = Math.max(max , sum);
        //         j++;
        //     }
        //     int k = 0 ;
        //     while(k < i) 
        //     {
        //         sum += nums[k];
        //         max  = Math.max(max , sum);
        //         k++;
        //     }
        // }
        // return max;
    // }
// }
