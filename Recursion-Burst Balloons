You are given N balloons, indexed from 0 to n - 1. Each balloon is painted with a number on it represented by an array arr. You are asked to brust all the balloons.
If you brust the ith  balloon,, you will get arr[ i - 1 ] * arr[ i ] * arr[ i + 1] coins. If i - 1, or i + 1 goes out of bounds of the array, consider it as if there is a balloon with a 1 painted on it.
Return the maximum coins you can collect by brusting the balloons wisely.

Example 1:

Input:
N = 4
arr[ ] = {3, 1, 5, 8}
Output: 167
Explanation: 
arr[ ] = {3, 1, 5, 8}  - - > {3, 5, 8} - - > {3, 8} - - > { 8} - -> { }
coins = 3 *1 *5,      +      3*5*8     +   1*3*8   +  1*8*1   = 167
 
 

Example 2:

Input:
N = 2
arr[ ] = {1, 10}
Output: 20







//User function Template for Java

class Solution {
  static int dp[][];
  public static int maxCoins(int N, int[] arr) {
     int a [] = new int [N+2];
     int n = a.length;
     a[0] = 1 ;
     a[n-1] = 1;
     
     for(int i =1 ;i<=n-2;i++){
         a[i] = arr[i-1];
     }
     
     dp = new int[n][n];
     
     for(int i =0 ;i<n;i++){
         Arrays.fill(dp[i] , -1);
     }
     
     return solve(a , 0 , n-1);
  }
  
  public static int solve(int a[] , int st , int end ){
      if(end - st == 1){
          return 0;
      }
      
      if(dp[st][end] != -1) return dp[st][end];
      
      int ans = 0;
      for(int i = st+1 ; i<end ;i++){
          int curr = a[st]*a[i]*a[end] + solve(a , st , i) + solve(a , i , end);
          ans = Math.max(ans , curr);
      }
      
      return dp[st][end] = ans;
  }
}
     
