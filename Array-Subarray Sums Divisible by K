Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Example 2:

Input: nums = [5], k = 9
Output: 0
 

Constraints:

1 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
2 <= k <= 104







        class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        int sum = 0, count = 0;
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);

        for (int num : nums) {
            sum += num;
            int key = (sum % k + k) % k; // k is added to handle negative remainders [-4 % 9 = -5 and (-5 + 9) % 9 = 4]
            count += map.getOrDefault(key, 0);
            map.put(key, map.getOrDefault(key, 0) + 1);
        }
        System.out.println(map);
        return count;
    }
}

// class Solution {
//     int count;
//     public int subarraysDivByK(int[] nums, int k) {
        // count = 0 ;
        // for(int i =0;i<nums.length;i++)
        // {
        //     int sum = 0;
        //     for(int j = i ; j<nums.length ; j++)
        //     {
        //         sum += nums[j];
        //         if(sum % k == 0)
        //         {
        //             count++;
        //         }
        //     }
        // }
        // return count;

        // second approch
        // int dp[][] = new int[nums.length + 1][nums.length + 1];
        // for(int i = 0 ; i<nums.length+1 ;i++){
        //     Arrays.fill(dp[i] , -1);
        // }
        // subarray(nums , 0 , 0 , k , dp);
        // return count;

        // third approch 


    // }

//     public void subarray(int nums[] ,int i , int j ,int k , int dp[][])
//     {
//         if(j == nums.length)
//         {
//             return;
//         }
//         else if(dp[i][j] != -1)
//         {
//             count += dp[i][j];
//             return;
//         }
//         else if(i>j)
//         {   
//             dp[i][j] = count;
//             subarray(nums, 0 , j +1 , k , dp);
//         }
//         else
//         {
//             int sum = 0;
//             for(int p = i ; p<= j ;p++)
//             {
//                 sum += nums[p];
//             }
//             if(sum % k == 0)
//             {
//                 count++;
//             }

//             dp[i][j] = count;
//             subarray(nums , i+1 , j , k , dp);
//         }

//     }
// }
