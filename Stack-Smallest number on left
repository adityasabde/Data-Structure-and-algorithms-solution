Input: n = 3
a = {1, 6, 2}
Output: -1 1 1
Explaination: There is no number at the 
left of 1. Smaller number than 6 and 2 is 1.

Input: n = 6
a = {1, 5, 0, 3, 4, 5}
Output: -1 1 -1 0 3 4
Explaination: Upto 3 it is easy to see 
the smaller numbers. But for 4 the smaller 
numbers are 1, 0 and 3. But among them 3 
is closest. Similary for 5 it is 4.


class Solution{
    static List<Integer> leftSmaller(int n, int a[])
    {
        // Stack <Integer> st = new Stack<>();
        // ArrayList<Integer> arr = new ArrayList<>();
        // arr.add(-1);
        // st.push(a[0]);
        
        // for(int i=1;i<n;i++){
            
        //     if(st.peek() < a[i]){
        //             arr.add(st.peek());
        //             st.push(a[i]);
        //     }else if(st.peek() == a[i]){
        //          st.push(a[i]);
        //          arr.add(-1);
        //     }
        //     else{

        //         while( !st.isEmpty() &&  a[i] <= st.peek() ){
        //                 st.pop();
        //         }
                
        //         if(st.isEmpty() || st.peek() == a[i]){
        //             arr.add(-1);
        //         }else{
        //             arr.add(st.peek());
        //         }
                
        //         st.push(a[i]);
        //     }
        // }
        // return arr;
        
    
     Stack <Integer> st = new Stack<>();
        ArrayList<Integer> arr = new ArrayList<>();
        // arr.add(-1);
        // st.push(a[0]);
        
        for(int i=0;i<n;i++){
            
             while( !st.isEmpty() &&  a[i] <= st.peek() ){
                        st.pop();
                }
                
                if(st.isEmpty() || st.peek() == a[i]){
                    arr.add(-1);
                }else{
                    arr.add(st.peek());
                }
                st.push(a[i]);
            
        }
        return arr;
    
    
    
    }
}
