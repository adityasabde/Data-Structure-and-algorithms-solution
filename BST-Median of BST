Given a Binary Search Tree of size N, find the Median of its Node values.

Example 1:

Input:
       6
     /   \
   3      8   
 /  \    /  \
1    4  7    9
Output: 6
Explanation: Inorder of Given BST will be:
1, 3, 4, 6, 7, 8, 9. So, here median will 6.

Example 2:

Input:
       6
     /   \
   3      8   
 /   \    /   
1    4   7   
Output: 5
Explanation:Inorder of Given BST will be:
1, 3, 4, 6, 7, 8. So, here median will
(4 + 6)/2 = 10/2 = 5.








class Tree
{
    static ArrayList<Integer> arr ;
    static int count ; 
    
    public static float findMedian(Node root)
    {
        arr = new ArrayList<>();
        count = 0;
        inorder(root);
        if(root == null)return -1;
        
        if(arr.size()%2 == 0){
            int mid = arr.size()/2;
            return (float)(arr.get(mid)  + arr.get(mid-1))/2;
        }
        int mid = arr.size()/2;
        return arr.get(mid);
    }
    
    public static void inorder(Node root){
        if(root == null)return;
        
        inorder(root.left);
        arr.add(root.data);
        count += root.data;
        inorder(root.right);
    }
}
