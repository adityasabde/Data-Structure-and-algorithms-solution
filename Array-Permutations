Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]


class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> arr = new ArrayList<>();
        ArrayList<Integer> list = new ArrayList<>();
        boolean freq [] = new boolean[nums.length];
        int n = nums.length;  
        func(list,arr,nums,freq,n);
        return arr;
    }
    
    public void func(ArrayList<Integer> list , List<List<Integer>>arr, int nums[],boolean freq[],int n ){
        if(list.size()==n){
            arr.add(new ArrayList<>(list));
            return;
        }
        
        for(int i =0;i<n;i++){
            if(!freq[i]){
              freq[i] = true;
              list.add(nums[i]);
              func(list,arr,nums,freq,n);
              list.remove(list.size()-1);
                freq[i] = false;
            }
        }
        
    }
}
