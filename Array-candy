

There are N children standing in a line. Each child is assigned a rating value given in the integer array ratings.
You are giving candies to these children subjected to the following requirements:

Each child must have atleast one candy.
Children with a higher rating get more candies than neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input:
N = 3
ratings [ ] = {1, 0, 2}
Output: 5
Explanation: 
You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
 

Example 2:

Input:
N = 3
ratings [ ] = {1, 2, 2}
Output: 4
Explanation: 
You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it statisfies the above two conditions.










class Solution {
    static int minCandy(int N, int ratings[]) {
         int ans =0;
         int n = ratings.length;
         int left [] = new int[n];
         int right[] = new int[n];
         Arrays.fill(left,1); Arrays.fill(right,1);
         
         for(int i =1;i<n;i++){
             if(ratings[i] > ratings[i-1]){
                 left[i] = left[i-1] +1;
             }
         }
         
          for(int i = n-2;i >=0 ;i--){
             if(ratings[i] > ratings[i+1]){
                 right[i] = right[i+1] +1;
             }
         }
         
         for(int i =0;i<n;i++){
             ans += Math.max(left[i] , right[i]);
         }
         return ans;
    }
}
