class Solution{
    //Function to find the leaders in the array.
    static ArrayList<Integer> leaders(int arr[], int n){
    
   //  O(n^2) solution
        //   ArrayList<Integer> a = new ArrayList<>(); 
        //   int i=n-1;
        //   int flag = 0;
        //   while(i>=0){
        //      int j= n-1;
        //      while(j>=i){
        //          if(arr[i]<arr[j]){
        //              flag = 1;
        //          }
        //          j--;
        //      }
        //      if(flag == 0){
        //         a.add(arr[i]);
        //      }else{
        //          flag = 0;
        //      }
        //     i--;
        //   }
        // Collections.reverse(a);
        // return a;
        
     
    O(N)  solution 
        Stack <Integer> st = new Stack<>();
        ArrayList<Integer> a = new ArrayList<>(); 
        int i=n-1;
        // a.add(arr[n-1]);
        st.push(arr[n-1]);
        while(i>=0){
            if(arr[i] >= st.peek()){
                a.add(arr[i]);
                st.push(arr[i]);
            }
          i--;
        }
        Collections.reverse(a);
        return a;
    }
}
