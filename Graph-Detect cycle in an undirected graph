Given an undirected graph with V vertices and E edges, check whether it contains any cycle or not. Graph is in the form of adjacency list where adj[i] contains all the nodes ith node is having edge with.

Example 1:

Input:  
V = 5, E = 5
adj = {{1}, {0, 2, 4}, {1, 3}, {2, 4}, {1, 3}} 
Output: 1
Explanation: 

1->2->3->4->1 is a cycle.
Example 2:

Input: 
V = 4, E = 2
adj = {{}, {2}, {1, 3}, {2}}
Output: 0
Explanation: 

No cycle in the graph.
 

Your Task:
You don't need to read or print anything. Your task is to complete the function isCycle() which takes V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the undirected graph contains any cycle or not, return 1 if a cycle is present else return 0.










class Solution {
    
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean visited [] = new boolean[adj.size()];
        for(int i =0 ; i<adj.size() ;i++){
            if(!visited[i] && detectcycle( i , adj , visited)){
                return true;
            }
        }
        return false;
    }
    
    public boolean detectcycle(int src ,  ArrayList<ArrayList<Integer>> adj, boolean visited[] ){
        Queue<int[]> q = new LinkedList<>();
        visited[src] = true;
        q.add(new int[]{src , -1});
        
        while(!q.isEmpty()){
            int arr[] = q.poll();
            int node = arr[0];
            int parent = arr[1];
            
            for(int i = 0 ; i<adj.get(node).size() ;i++){
                if(!visited[adj.get(node).get(i)]){
                    visited[adj.get(node).get(i)] = true;
                    q.add(new int []{adj.get(node).get(i) , node});
                }
                else if(parent != adj.get(node).get(i)){
                    return true;
                }
            }
        }
        return false;
    }
}
