You are given a 0-indexed integer array nums and an integer k. You have a starting score of 0.

In one operation:

choose an index i such that 0 <= i < nums.length,
increase your score by nums[i], and
replace nums[i] with ceil(nums[i] / 3).
Return the maximum possible score you can attain after applying exactly k operations.

The ceiling function ceil(val) is the least integer greater than or equal to val.




class Solution {
    public long maxKelements(int[] nums, int k) {
        PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());
        for(int i =0 ;i<nums.length;i++)
        {
            pq.add((long)nums[i]);
        }
        long score = 0;
        while(k>0)
        {
            // System.out.println(pq);
            score += pq.peek();
            long x = pq.poll();
            if(x % 3 == 0){
                pq.add((long)Math.ceil(x / 3) );
            }
            else{
                pq.add(((long)Math.ceil(x / 3) + 1));
            }
            
            k--;
        }
        return score ;
    }
}
