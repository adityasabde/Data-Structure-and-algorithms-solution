There are a total of N tasks, labeled from 0 to N-1. Some tasks may have prerequisites, for example to do task 0 you have to first complete task 1, which is expressed as a pair: [0, 1]
Given the total number of tasks N and a list of prerequisite pairs P, find if it is possible to finish all tasks.


Example 1:

Input: 
N = 4, P = 3
prerequisites = {{1,0},{2,1},{3,2}}
Output:
Yes
Explanation:
To do task 1 you should have completed
task 0, and to do task 2 you should 
have finished task 1, and to do task 3 you 
should have finished task 2. So it is possible.
Example 2:

Input:
N = 2, P = 2
prerequisites = {{1,0},{0,1}}
Output:
No
Explanation:
To do task 1 you should have completed
task 0, and to do task 0 you should
have finished task 1. So it is impossible.







//User function Template for Java

class Solution {
    public boolean isPossible(int p, int[][]pr)
    {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        
        for(int i = 0 ;i<p;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i =0 ; i< pr.length ;i++){
            adj.get(pr[i][0]).add(pr[i][1]);
        }
        
        int ranking [] = new int[p];
        
        for(int i =0 ; i<p ;i++)
        {
            for(int x : adj.get(i)){
                ranking[x]++;
            }
        }
        
        Queue<Integer> q = new LinkedList<>();
        
        for(int i = 0 ; i<p ;i++){
            if(ranking[i] == 0){
                q.add(i);
            }
        }
        int count  = 0;
        while(!q.isEmpty()){
            int num = q.poll();
            count++;
            
            for(int y : adj.get(num)){
                ranking[y]--;
                if(ranking[y] == 0 ){
                    q.add(y);
                }
            }
        }
        
        
        if(count == p)return true;
        
        return false;
    }
    
}
