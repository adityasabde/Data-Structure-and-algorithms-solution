


Given a weighted, undirected and connected graph of V vertices and E edges. The task is to find the sum of weights of the edges of the Minimum Spanning Tree.

 

Example 1:

Input:
3 3
0 1 5
1 2 3
0 2 1

Output:
4
Explanation:

The Spanning Tree resulting in a weight
of 4 is shown above.
Example 2:

Input:
2 1
0 1 5

Output:
5
Explanation:
Only one Spanning Tree is possible
which has a weight of 5.












// User function Template for Java

class Pair{
    int node;
    int wt;
    Pair(int node , int wt){
        this.wt = wt;
        this.node = node;
    }
}

class Solution{
	static int spanningTree(int V, int E, int edges[][]){
	    
	    ArrayList<ArrayList<ArrayList<Integer>>> adj = new ArrayList<>();
	    
	    for(int i = 0; i<V ;i++){
	        adj.add(new ArrayList<>());
	    }
	    
	    for(int i =0 ;i<edges.length ;i++){
	        ArrayList<Integer> arr = new ArrayList<>();
	        arr.add(edges[i][1]);
	        arr.add(edges[i][2]);
	        adj.get(edges[i][0]).add(arr);
	        
	        ArrayList<Integer> arr2 = new ArrayList<>();
	        arr2.add(edges[i][0]);
	        arr2.add(edges[i][2]);
	        adj.get(edges[i][1]).add(arr2);
	    }
	    
	    
	    
	    PriorityQueue<Pair> pq = new PriorityQueue<>((x ,y) -> x.wt - y.wt);
	    
	    int visited[] = new int[V];
	    
	    int answt = 0;
	    pq.add(new Pair(0 , 0));
	    
	    while(!pq.isEmpty()){
	        Pair x = pq.poll();
	        
	        if(visited[x.node] == 1)continue;
	        
	        visited[x.node] = 1;
	        answt += x.wt;
	        
	        for(int i = 0 ; i<adj.get(x.node).size() ;i++){
	            int newedwt = adj.get(x.node).get(i).get(1);
	            int newdesnode = adj.get(x.node).get(i).get(0);
	            
	            if(visited[newdesnode] == 0){
	                pq.add(new Pair(newdesnode , newedwt));
	            }
	        }
	    }
	    return answt;
	}
}
