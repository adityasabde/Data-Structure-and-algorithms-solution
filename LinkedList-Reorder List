Given a singly linked list: A0→A1→...→An-2→An-1, reorder it to: A0→An-1→A1→An-2→A2→An-3→...
For example: Given 1->2->3->4->5 its reorder is 1->5->2->4->3.

Note: It is recommended do this in-place without altering the node's values.

Example 1:

Input:
LinkedList: 1->2->3
Output: 1 3 2
Explanation:
Here n=3, so the correct
order is A0→A2→A1
Example 2:

Input:
Explanation: 1->7->3->4
Output: 1 4 7 3
Explanation:
Here n=4, so the correct
order is A0→A3→A1→A2







class Solution {
    Node reorderlist(Node head) {
        int len = length(head);
        Node temp= head;
        for(int i =1 ; i<= len/2 ;i++){
            temp = temp.next;
            
        }
        
        Node head2 = temp.next;
        temp.next = null;
    
        Node newhead = reverse(head2);
        Node nextNode = newhead;
        while(newhead != null){
             newhead = newhead.next;
        }
        
        Node t = head;
        while(t != null && nextNode != null){
            Node n = t.next;
            t.next = nextNode;
            Node newnext =  nextNode.next;
            nextNode.next = n;
            nextNode = newnext;
            t = n;
        }
        return head;
    }
    
    Node reverse(Node node)
    {
        Node prev = null;
        Node current = node;
        Node next = null;
        while (current != null) {
            next = current.next;
            current.next = prev;
            prev = current;
            current = next;
        }
        node = prev;
        return node;
    }
    
    int length(Node head){
        int len = 0;
        Node temp = head;
        while(temp!=null){
            len++;
            temp = temp.next;
        }
        return len;
    }
    
}
