class Solution {
    public int longestPalindromeSubseq(String s) {
        StringBuilder str = new StringBuilder();
        int dp[][] = new int[s.length()+1][s.length()+1];
        
        for(int i =0 ;i<s.length() ;i++){
            Arrays.fill(dp[i] , -1);
        }
        
        for(int i =0 ;i<s.length();i++){
            str.append(s.charAt(i));
        }

        str.reverse();

        return solve(s , str.toString() , 0 , 0 , dp );
    }

    public int solve(String s1 , String s2 , int i , int j , int dp[][]){
        if(i == s1.length()){
            return 0;
        }

        if(j == s2.length()){
            return 0;
        }

        if(dp[i][j] != -1){
            return dp[i][j];
        }

        if(s1.charAt(i) == s2.charAt(j)){
            return dp[i][j] =  1 + solve(s1 , s2 , i+1 , j+1 , dp);
        }
        else
        {
            return dp[i][j] =  Math.max( solve(s1 , s2 , i+1 , j , dp) , solve(s1 ,s2 ,i , j+1 , dp));
        }
    }
}
