Given the head of a linked list, reverse the nodes of the list k at a time, and return the modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]
Example 2:


Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]




/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        ListNode node = head;
        Stack< ListNode > st = new Stack <>();
        ListNode prev = null;
        while(node != null){
            int count = k;
            
            while(count > 0){
                st.push(node);
                if(node.next != null){
                    node =  node.next;   
                }else{
                    break;
                }
                count--;
            }

            ListNode x = st.peek().next;
           if(st.size()!=k){
                 break;
           }
            while(!st.isEmpty()){
                if(prev == null){
                   prev = st.peek();
                   head = st.peek();
                }else{
                   prev.next = st.peek();
                    prev = prev.next;
                }
               st.pop();
            }
            prev.next = x;
            node = x;
        }
        return head;
    }
}
