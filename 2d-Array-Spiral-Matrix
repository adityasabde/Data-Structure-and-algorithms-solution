link :: https://leetcode.com/problems/spiral-matrix/

class Solution
{
    //Function to return a list of integers denoting spiral traversal of matrix.
    static ArrayList<Integer> spirallyTraverse(int matrix[][], int r, int c)
    {
       // l - r -- > 1 , t - d ->2 , r- l -> 3 , b - t-> 4
        ArrayList<Integer> ans =new ArrayList<>();

 int top=0;
       int right=c-1;
       int left=0;
       int bottom=r-1;
       
       
       while(top<=bottom && left<=right){
           //traverse left to right
           for(int i=left; i<=right; i++)
               ans.add(matrix [top][i]);
               top++;
               
              //traverse top to botton  
               for(int i=top; i<=bottom; i++)
               ans.add(matrix[i][right]);
               right--;
               
               if(top<=bottom){ //check overflow condition 
                   
                // traverse right to left    
               for(int i=right; i>=left; i--)
               ans.add(matrix[bottom][i]);
               bottom--;
               }
               
               if(left<=right){  //check over flow condition
                   
                //traverse the bottom to top   
               for(int i=bottom ; i>=top; i--)
               ans.add(matrix[i][left]);
               left++;
               
               }
       }
       return ans;
    }
}


        int m = matrix.length;
        int n = matrix[0].length;
        
        int left =0;
        int right = n-1;
        
        int top = 0;
        int bottom=m-1;
       
        int op = 1;
      /*  1 = left to right  
        2 = top to down
        3 = right to left
        4 = bottom to top*/     
        
       while(top<=bottom && left<=right){
           if(op == 1){
               for(int i = left ;i<=right;i++){
                   arr.add(matrix[top][i]);
               }
              top++; 
           }
           else if(op == 2){
               for(int i = top;i<=bottom;i++){
                   arr.add(matrix[i][right]);
               }
               right--;
           }
           else if(op == 3){
               for(int i=right ;i>=left;i--){
                  arr.add(matrix[bottom][i]);
               }
               bottom--;
           }
           else if(op == 4){
               for(int i =bottom;i>=top;i--){
                   arr.add(matrix[i][left]);
               }
               left++;
           }
           if(op <= 4){
               op++;
           }else{
              op = 0;
           }
       } 
        
        return arr;
    }
}
