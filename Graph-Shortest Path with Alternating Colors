You are given an integer n, the number of nodes in a directed graph where the nodes are labeled from 0 to n - 1. Each edge is red or blue in this graph, and there could be self-edges and parallel edges.

You are given two arrays redEdges and blueEdges where:

redEdges[i] = [ai, bi] indicates that there is a directed red edge from node ai to node bi in the graph, and
blueEdges[j] = [uj, vj] indicates that there is a directed blue edge from node uj to node vj in the graph.
Return an array answer of length n, where each answer[x] is the length of the shortest path from node 0 to node x such that the edge colors alternate along the path, or -1 if such a path does not exist.

 

Example 1:

Input: n = 3, redEdges = [[0,1],[1,2]], blueEdges = []
Output: [0,1,-1]
Example 2:

Input: n = 3, redEdges = [[0,1]], blueEdges = [[2,1]]
Output: [0,1,-1]
 

Constraints:

1 <= n <= 100
0 <= redEdges.length, blueEdges.length <= 400
redEdges[i].length == blueEdges[j].length == 2
0 <= ai, bi, uj, vj < n






class Solution {
    public int[] shortestAlternatingPaths(int n, int[][] re, int[][] be) {
        ArrayList<int []> adj[] = new ArrayList[n];

        for(int i = 0 ; i<n;i++){
            adj[i] = new ArrayList<>();
        }

        for(int i = 0 ; i<re.length ;i++){
            adj[re[i][0]].add(new int[]{re[i][1] , 0});
        }

        for(int i =0 ;i<be.length ;i++){
            adj[be[i][0]].add(new int[]{be[i][1] , 1});
        }

        boolean visited[][] = new boolean[n][2];
        int ans [] = new int[n];
        Arrays.fill(ans , -1);
        Queue<int []> q = new LinkedList<>();
        q.add(new int[]{0 , 0 , -1}); //node , steps , color
        
        visited[0][0] = true;
        visited[0][1] = true;
        ans[0] = 0;

        while(!q.isEmpty())
        {
            int arr [] = q.poll();
            int node  = arr[0] , steps = arr[1] , prevcolor = arr[2];

            for(int[] x : adj[node])
            {
                if(!visited[x[0]][x[1]] && x[1] != prevcolor)
                {
                    visited[x[0]][x[1]] = true;
                    q.add(new int[]{x[0] , steps +1 , x[1]});
                    if(ans[x[0]] == -1)
                    {
                        ans[x[0]] = 1 + steps;
                    }
                }
            }
        }
return ans;
    }

}
