Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray
 whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

 

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 

Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104









class Solution {
    public int minSubArrayLen(int target, int[] nums) {
       int i =0 ;
       int j =0 ;
        int sum =0 ;
        int min = Integer.MAX_VALUE;
       while(j<nums.length){
           sum += nums[j];
           
           if(sum >= target){
                min =  Math.min(j - i + 1 , min );
                while(i<nums.length ){
                    if(sum - nums[i] < target ){
                        break;
                    }
                    sum -= nums[i];
                    i++;
                }
                min =  Math.min(j - i + 1 , min );
           }
            j++;
       } 
       if(min == Integer.MAX_VALUE)return 0;
       return min ;  
    }
}
