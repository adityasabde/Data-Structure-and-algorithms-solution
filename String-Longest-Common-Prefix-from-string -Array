First Approch

class Solution{
    String longestCommonPrefix(String arr[], int n){
   
        //  int size = a.length;
 
        // /* if size is 0, return empty string */
        // if (size == 0)
        //     return "";
 
        // if (size == 1)
        //     return a[0];
 
        // /* sort the array of strings */
        // Arrays.sort(a);
 
        // /* find the minimum length from first and last string */
        // int end = Math.min(a[0].length(), a[size-1].length());
 
        // /* find the common prefix between the first and
        //   last string */
        // int i = 0;
        // while (i < end && a[0].charAt(i) == a[size-1].charAt(i) )
        //     i++;
 
        // String pre = a[0].substring(0, i);
        
        // if(pre.length() == 0){
        //     return "-1";
        // }
        // return pre;
        
       
       second approch
       
        // class Solution{
    // String longestCommonPrefix(String arr[], int n){
        if (n == 1) return arr[0];
        String res = "";
        boolean include;
        for (int i = 0; i < arr[0].length (); ++i)
        {
            include = true;
            for (int j = 1; j < n; ++j)
            {
                // checking if the current character arr[0][i] is eligible
                // for being included in the result or not
                if (i >= arr[j].length() || 
                arr[0].charAt(i) != arr[j].charAt(i))
                {
                    include = false;
                    break;
                }
            }
            // if it can't be included, we need not check the further characters
            if (!include) break;
            // if it can be included, we include it and check ahead
            res += arr[0].charAt(i);
        }
        if (res == "") return "-1";
        return res;
    }
}
        

    // }
// }
