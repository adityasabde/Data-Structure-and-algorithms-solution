You are given an array of positive integers price where price[i] denotes the price of the ith candy and a positive integer k.

The store sells baskets of k distinct candies. The tastiness of a candy basket is the smallest absolute difference of the prices of any two candies in the basket.

Return the maximum tastiness of a candy basket.

 

Example 1:

Input: price = [13,5,1,8,21,2], k = 3
Output: 8
Explanation: Choose the candies with the prices [13,5,21].
The tastiness of the candy basket is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8.
It can be proven that 8 is the maximum tastiness that can be achieved.
Example 2:

Input: price = [1,3,1], k = 2
Output: 2
Explanation: Choose the candies with the prices [1,3].
The tastiness of the candy basket is: min(|1 - 3|) = min(2) = 2.
It can be proven that 2 is the maximum tastiness that can be achieved.











class Solution {
    private boolean isValid(int [] price , int taste , int k){
        int n = price.length;
        int prev = price[0];
        int k1 = k - 1;
        for(int i =1 ;i<n && k1 >0 ;i++){
            if(prev + taste <= price[i]){
                k1--;
                prev = price[i];
            }
        }
        
        if(k1 == 0)return true;
        
        return false;
    }
    
    
    public int maximumTastiness(int[] price, int k) {
        Arrays.sort(price);
        int n = price.length;
        int ans = 0;
        int low = 0;
        int high = price[n-1] - price[0];
        
        while(low <= high){
            int mid = (low + high)/2;
            if(isValid(price , mid , k)){
                ans = Math.max(ans , mid);
                low  = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        
        return ans;
    }
}
