
Given a number N, the task is to count the numbers in the range [1, N] which can be represented as power of 3.

Note: 1 can be represented as the power of 3.

Input:
1. The first line of the input contains a single integer T denoting the number of test cases. The description of T test cases follows.
2. The first line of each test case contains single integer N.


Output: For each test case, print the answer



Input:
2
6
1

Output:
2
1



/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
// 	    Scanner sc = new Scanner(System.in);
	    
// 	    int x = sc.nextInt();
// 	    int a[] = new int[x];
// 	    for(int i = 0 ; i<x;i++){
// 	        a[i] = sc.nextInt();
// 	    }
	    
// 		for(int i =0 ;i<a.length;i++){
// 		    int count = 1;
// 		    int n = a[i];
// 		    for(int j=1 ;j<=n;j++){
// 		       if(power((long)3,j)== true){
// 		         count++;
// 		       } 
// 		    }
// 		    System.out.println(count);


Scanner sc = new Scanner(System.in);
  int t =sc.nextInt();
  while(t!=0)
  {
      int n = sc.nextInt();
      int count = 0;
      for(int i = 0;i<n;i++)
      {
          int mul = (int)Math.pow(3,i);
          if(mul<=n)
          {
              count++;
          }
          else if(mul>n)
          {
              break;
          }
      }
      System.out.println(count);
      t--;
		}
	}
	
	public static boolean power(long pow , int n){
        if(pow == n){
            return true;
        }
        if(pow > n){
            return false;
        }
        pow = pow*3;
        return power(pow , n);
    }
}
