Given an array of integers arr, find the sum of min(b), where b ranges over every (contiguous) subarray of arr. Since the answer may be large, return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.
Sum is 17.





// class Solution {
//     class Pair{
//         int element;
//         int minNum;
//         Pair(int ele , int num){
//             element = ele;
//             minNum = num; 
//         }
//     }
//     public int sumSubarrayMins(int[] arr) {
//         // PriorityQueue<Integer> pq = new PriorityQueue<>();
//         // long ans = 0;
//         // for(int i =0 ;i<arr.length;i++){
//         //     if(!pq.isEmpty()){
//         //         pq.clear();
//         //     }
//         //     for(int j =i ;j<arr.length;j++){
//         //         pq.add(arr[j]);
//         //         ans += pq.peek();
//         //     }
//         // }
//         // return (int)ans % 1000000007;

//         int left [] = new int [arr.length];
//         int right [] = new int[arr.length];

//         ArrayDeque<Pair> stack1 = new ArrayDeque<>();
//         ArrayDeque<Pair> stack2 = new ArrayDeque<>();
        
//         // checking left side 
//         for(int i =0 ; i<arr.length ; i++){
//             int count = 1;
//             int cur_ele = arr[i];
//             while(stack1.size() !=0 && stack1.peek().element > cur_ele){
//                 count += stack1.peek().minNum;
//                 stack1.pop();
//             }
//             stack1.push(new Pair(cur_ele , count));
//             left[i] = count;
//         }
//         // chacking right  side
//         for(int i =arr.length-1 ; i>=0 ; i--){
//             int count = 1;
//             int cur_ele = arr[i];
//             while(stack2.size()!=0 && stack2.peek().element >= cur_ele){
//                 count += stack2.peek().minNum;
//                 stack2.pop();
//             }
//             stack2.push(new Pair(cur_ele , count));
//             right[i] = count;
//         }

//         int ans = 0 ;
//         int mod = (int)Math.pow(10 , 9) +7;
//         for(int i =0 ;i<arr.length; i++){
//             ans = (ans + left[i]*right[i]*arr[i]) % mod;;
//         }
//         return ans;
//     }
// }


class Solution {
    public int sumSubarrayMins(int[] arr) {
        long res = 0;
        Stack<Integer> stack = new Stack<Integer>();
        long M = (long)1e9 + 7;
        stack.push(-1);
        
        for (int i2 = 0; i2 < arr.length+1; i2++){
            int currVal = (i2<arr.length)? arr[i2] : 0;
            
            while(stack.peek() !=-1 && currVal < arr[stack.peek()]){
                int index = stack.pop();
                int i1 = stack.peek();
                int left = index - i1;
                int right = i2 - index;
                long add = (long)(left * right * (long)arr[index]) % M;
                res += add ;
                res %= M;
            }
            
            stack.push(i2);
            
        }
        
        return (int)res;
        
    }
}
