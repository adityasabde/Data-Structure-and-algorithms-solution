You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].
Example 2:

Input: words = ["a","e","i"], queries = [[0,2],[0,1],[2,2]]
Output: [3,2,1]
Explanation: Every string satisfies the conditions, so we return [3,2,1].
 

Constraints:

1 <= words.length <= 105
1 <= words[i].length <= 40
words[i] consists only of lowercase English letters.
sum(words[i].length) <= 3 * 105
1 <= queries.length <= 105
0 <= li <= ri < words.length





class Solution {
    public int[] vowelStrings(String[] w, int[][] q) {
        int ans [] = new int[q.length];
        
        int sumfront[] = new int[w.length + 1];
            for(int  i = 0 ; i< w.length ;i++)
            {
                if((w[i].charAt(0)== 'a' || w[i].charAt(0)== 'e' || w[i].charAt(0)== 'i' || w[i].charAt(0)== 'o' || w[i].charAt(0)== 'u') &&                    (w[i].charAt(w[i].length()-1)== 'a' ||w[i].charAt(w[i].length()-1)== 'e' ||w[i].charAt(w[i].length()-1)== 'i'                                ||w[i].charAt(w[i].length()-1)== 'o' ||w[i].charAt(w[i].length()-1)== 'u' ))
                {
                    System.out.print(w[i] + " ");
                     sumfront[i+1] = 1 + sumfront[i];
                }

                else{
                    sumfront[i+1] = sumfront[i];
                }
            }
        
        for(int j=0 ;j<q.length ;j++){
            int start = q[j][0];
            int end = q[j][1];
           
            ans[j] =  sumfront[end + 1] - sumfront[start];
           
        }
        return ans;
    }
}
