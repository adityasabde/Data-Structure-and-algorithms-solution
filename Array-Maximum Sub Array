Find out the maximum sub-array of non negative numbers from an array.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array. Sub-array A is greater than sub-array B if sum(A) > sum(B).

Example:
A : [1, 2, 5, -7, 2, 3]
The two sub-arrays are [1, 2, 5] [2, 3].
The answer is [1, 2, 5] as its sum is larger than [2, 3]

NOTE: If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.
If no such subarray is present return "-1"

Example 1:

Input:
N = 3
A[] = {1, 2, 3}
Output: 1 2 3
Explanation: In the given array every
element is non-negative.


class Solution {

    ArrayList<Integer> findSubarray(int a[], int n) {
        ArrayList<Integer> ans = new ArrayList<>();
        long sum = 0;
        long max = 0;
        int i = 0;
        int j = 0;
        int start = 0;
        int end = 0;
        while(j<n){
            sum += a[j];
            
            if(a[j++]<0){
                sum = 0;
                i = j;
            } 
            
            if(sum>=max){
                max = sum;
                start = i;
                end = j;
            }
          
        }
        for(int k = start;k<end;k++) ans.add(a[k]);
        if(ans.size() == 0) ans.add(-1);
        return ans;
    }
}

