Given a positive integer n, there exists a 0-indexed array called powers, composed of the minimum number of powers of 2 that sum to n. The array is sorted in non-decreasing order, and there is only one way to form the array.

You are also given a 0-indexed 2D integer array queries, where queries[i] = [lefti, righti]. Each queries[i] represents a query where you have to find the product of all powers[j] with lefti <= j <= righti.

Return an array answers, equal in length to queries, where answers[i] is the answer to the ith query. Since the answer to the ith query may be too large, each answers[i] should be returned modulo 109 + 7.



Input: n = 15, queries = [[0,1],[2,2],[0,3]]
Output: [2,4,64]
Explanation:
For n = 15, powers = [1,2,4,8]. It can be shown that powers cannot be a smaller size.
Answer to 1st query: powers[0] * powers[1] = 1 * 2 = 2.
Answer to 2nd query: powers[2] = 4.
Answer to 3rd query: powers[0] * powers[1] * powers[2] * powers[3] = 1 * 2 * 4 * 8 = 64.
Each answer modulo 109 + 7 yields the same answer, so [2,4,64] is returned.


Input: n = 2, queries = [[0,0]]
Output: [2]
Explanation:
For n = 2, powers = [2].
The answer to the only query is powers[0] = 2. The answer modulo 109 + 7 is the same, so [2] is returned.


class Solution {
    public int[] productQueries(int n, int[][] queries) {
        int mod=1000000007;
        //generating the array based on the given n value  n%2 and n/2 evry time genrating an array of 0 and 1 indcating whether to consdier the index or not and generate the powers array according to the array generated indexes
        List<Integer> arr=new ArrayList<Integer>();
        List<Integer> powers=new ArrayList<Integer>();
        while(n>0){  
            arr.add((int)n%2);
            n/=2;
        }
         System.out.print(arr);

        for(int i=0;i<arr.size();i++){
            if(arr.get(i)==1){ 
                 //considering only the arrays of value equals 1 indicating the maximum powers sum to n
                int t=(int)Math.pow(2,i);
                powers.add(t);
            }
        }
        int result[]=new int[queries.length];
        int j=0;
        for(int []a:queries){
            long res=1;
            for(int i=a[0];i<=a[1];i++){
                res=(res*powers.get(i)%mod);
            }
            result[j++]=(int)res%mod;
        }
        return result;
    }
}
