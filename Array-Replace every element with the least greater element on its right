Given an array arr[] of N integers and replace every element with the least greater element on its right side in the array. If there are no greater elements on the right side, replace it with -1. 


Input:
arr[] = {8, 58, 71, 18, 31, 32, 63, 92, 43, 3, 91, 93, 25, 80, 28}
Output: {18, 63, 80, 25, 32, 43, 80, 93, 80, 25, 93, -1, 28, -1, -1}
Explanation: 
The least next greater element of 8 is 18.
The least next greater element of 58 is 63 and so on.


Input:
arr[] = {2, 6, 9, 1, 3, 2}
Output: {3, 9, -1, 2, -1, -1}
Explanation: 
The least next greater element of 2 is 3. 
The least next greater element of 6 is 9.
least next greater element for 9 does not
exist and so on.

Approch 1-----------------------------------------------------------------------------------------------

class Solution {
    public static ArrayList<Integer> findLeastGreater(int n, int[] a) {
    //     ArrayList<Integer> a = new ArrayList<>();
    //     ArrayList <Integer> al = new ArrayList<>();
        
    //     a.add(-1);
    //     al.add(arr[n-1]);
        
    //     for(int i = n-2 ; i>=0;i--){
    //       Collections.sort(al);
    //       int j = al.size()-1;
    //       if(j<al.size() && al.get(j) <= arr[i]){
    //           a.add(-1);
    //           al.add(arr[i]);
    //       }else{
    //           int x = 0;
    //           while(j>=0 && al.get(j) > arr[i]){
    //               x = al.get(j);
    //               j--;
    //           }
               
    //           a.add(x);
    //           al.add(arr[i]);
    //       }
           
    //     //   System.out.println(al);
    //     }
    //     Collections.reverse(a);
    // return a;


Approch 2---------------------------------------------------------------------------------------------------

        ArrayList<Integer> ans = new ArrayList<>();

        TreeSet<Integer> set = new TreeSet<>();

        for(int i = n-1;i>=0;i--){

            set.add(a[i]);

            if(set.higher(a[i]) == null || set.higher(a[i]) == a[i]) ans.add(-1);

            else ans.add(set.higher(a[i]));

        }

        Collections.reverse(ans);

        return ans;



    } 
}
        
