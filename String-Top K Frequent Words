Given an array of strings words and an integer k, return the k most frequent strings.

Return the answer sorted by the frequency from highest to lowest. Sort the words with the same frequency by their lexicographical order.


Input: words = ["i","love","leetcode","i","love","coding"], k = 2
Output: ["i","love"]
Explanation: "i" and "love" are the two most frequent words.
Note that "i" comes before "love" due to a lower alphabetical order.


Input: words = ["the","day","is","sunny","the","the","the","sunny","is","is"], k = 4
Output: ["the","is","sunny","day"]
Explanation: "the", "is", "sunny" and "day" are the four most frequent words, with the number of occurrence being 4, 3, 2 and 1 respectively.




class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        HashMap<String,Integer> map = new  LinkedHashMap<>();
        List<String> al = new ArrayList<>();
         Arrays.sort(words);
        for(int i = 0 ; i < words.length ; i++ ){
            map.put(words[i],map.getOrDefault(words[i],0)+1);
        }

        int max = 0 ;
        String x = "";
        for(int i =0 ;i<k;i++){
           for(Map.Entry<String,Integer> entry : map.entrySet()){
               if(entry.getValue() > max){
                    max = entry.getValue();
                    x =  entry.getKey(); 
               }
           } 

           al.add(x);
           map.remove(x);
           max =0 ;
       }

       return al;

    }
}
