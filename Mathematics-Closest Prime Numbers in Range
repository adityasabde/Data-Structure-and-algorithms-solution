

Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= nums1 < nums2 <= right .
nums1 and nums2 are both prime numbers.
nums2 - nums1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [nums1, nums2]. If there are multiple pairs satisfying these conditions, return the one with the minimum nums1 value or [-1, -1] if such numbers do not exist.

A number greater than 1 is called prime if it is only divisible by 1 and itself.


class Solution {
    boolean isprime [] = new boolean[10000001] ;
    public int[] closestPrimes(int left, int right) {
        prime();
        int min  = Integer.MAX_VALUE;
       int prev = 0;
        int ans[] = new int[2];
        Arrays.fill(ans , -1);
        
       
        
        
        for(int i = left ; i<= right ;i++)
        {    
           if(isprime[i]){
              if(min > i-prev && prev != 0){
                  ans[0] = prev;
                  ans[1] = i;
                  min = i-prev;
              }
               prev = i;
           }   
        }
        
        
        return ans;
    }
    
    public void prime(){
        Arrays.fill(isprime , true);
        
        isprime[0] = false;
        isprime[1] = false;
        
        for(int i = 2 ;i*i < 1000000 ;i++)
        {
            for(int j = i*2 ;j <= 1000000 ; j+=i )
            {
                isprime[j] = false;    
            }
        }
        
       
    }
}
