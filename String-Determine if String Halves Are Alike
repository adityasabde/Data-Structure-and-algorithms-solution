You are given a string s of even length. Split this string into two halves of equal lengths, and let a be the first half and b be the second half.

Two strings are alike if they have the same number of vowels ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'). Notice that s contains uppercase and lowercase letters.

Return true if a and b are alike. Otherwise, return false.

 

Example 1:

Input: s = "book"
Output: true
Explanation: a = "bo" and b = "ok". a has 1 vowel and b has 1 vowel. Therefore, they are alike.
Example 2:

Input: s = "textbook"
Output: false
Explanation: a = "text" and b = "book". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.



class Solution {
    public boolean halvesAreAlike(String s) {
        String first = s.substring(0,s.length()/2);
        String second = s.substring(s.length()/2 , s.length());
        
        int count1 = 0;
        int count2 = 0;

        for(int i =0 ;i<first.length();i++){
            if(first.charAt(i) ==  'a' || first.charAt(i) ==  'e' || first.charAt(i) ==  'i' || first.charAt(i) == 'o' || first.charAt(i) ==  'u' || first.charAt(i) ==  'A' || first.charAt(i) ==  'E' || first.charAt(i) == 'I' || first.charAt(i) ==  'O'|| first.charAt(i) =='U' ){
                count1++;
            }
        }

        for(int i =0 ;i<second.length();i++){
            if(second.charAt(i) ==  'a' || second.charAt(i) ==  'e' || second.charAt(i) ==  'i' || second.charAt(i) == 'o' || second.charAt(i) ==  'u' || second.charAt(i) ==  'A' || second.charAt(i) ==  'E' || second.charAt(i) == 'I' || second.charAt(i) ==  'O'|| second.charAt(i) =='U' ){
                count2++;
            }
        }

        if(count1 == count2){
            return true;
        }
        return false;
    }
}
