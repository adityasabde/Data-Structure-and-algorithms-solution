Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.
 

Constraints:

1 <= nums.length <= 200
1 <= nums[i] <= 100








class Solution {
    public boolean canPartition(int[] nums) {
        
        int sum = 0 ;
        for(int i =0 ;i<nums.length ; i++){
            sum  += nums[i];
        }
        if(sum%2 != 0)return false;

        Boolean dp[][] = new Boolean[nums.length+1][sum+1];

        // for(int i =0;i<nums.length ;i++)Arrays.fill(dp[i] , false);
        
        return func(0 , nums , sum/2  , dp);
    }

    public boolean func(int i , int [] nums , int sum , Boolean dp[][]){
         if(sum  == 0)return true;

        else if(i >= nums.length || sum < 0){
            return false;
        }
    
        if(dp[i][sum] != null)return dp[i][sum];
    
        return dp[i][sum] =( func(i+1 , nums , sum - nums[i]  , dp) || func( i+1 , nums, sum , dp));
    }

}
