Given an array arr[] of N elements and a number K. Split the given array into K subarrays such that the maximum subarray sum achievable out of K subarrays formed is minimum possible. Find that possible subarray sum.


Example 1:

Input:
N = 4, K = 3
arr[] = {1, 2, 3, 4}
Output: 4
Explanation:
Optimal Split is {1, 2}, {3}, {4}.
Maximum sum of all subarrays is 4,
which is minimum possible for 3 splits. 
Example 2:

Input:
N = 3, K = 2
A[] = {1, 1, 2}
Output:
2
Explanation:
Splitting the array as {1,1} and {2} is optimal.
This results in a maximum sum subarray of 2.











class Solution {
    static int splitArray(int[] arr , int N, int k) {
       int low = findlarge(arr);
       int high = sumarray(arr , N);
       int ans = Integer.MAX_VALUE;
       while(low<=high){
           int mid=low+(high-low)/2;
           if(feasible(arr, k , mid)){
               ans = Math.min(ans , mid);
               high = mid-1;
           }else{
               low = mid +1;
           }
       }
       return ans;
    }
    
    static boolean feasible(int arr[] , int k , int mid){
        int count = 1;
        int sum = 0;
        for(int i =0 ;i<arr.length ;i++){
            if(sum + arr[i] <= mid ){
                sum += arr[i];
            }else{
                count++;
                sum = arr[i] ;
            }
        }
        
        if(count > k){
            return false;
        }
        return true;
    }
    
    static int sumarray(int arr[] , int N ){
        int sum =0;
        for(int i =0 ;i<N ;i++){
            sum += arr[i];
        }
        
        return sum;
    }
    
    static int findlarge(int arr[]){
        int max = Integer.MIN_VALUE;
        
        for(int i =0 ;i<arr.length;i++){
            max = Math.max(arr[i] , max);
        }
        return max;
    }
};
