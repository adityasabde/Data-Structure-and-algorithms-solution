/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        HashSet<ListNode> set = new HashSet<>();

        ListNode n1 = headA;
        ListNode n2 = headB;

        while(n1 != null && n2 != null){
            if(set.contains(n1)){
                return n1;
            }
            set.add(n1);
            if(set.contains(n2)){
                return n2;
            }
            set.add(n2);

            n1 = n1.next ;
            n2 = n2.next ;
        }

        while(n1 != null){
             if(set.contains(n1)){
                return n1;
            }
            set.add(n1);
            n1 = n1.next ;
        }

        while(n2 != null){
             if(set.contains(n2)){
                return n2;
            }
            set.add(n2);
            n2 = n2.next ;
        }
        return null;
    }
}


// second approch using constant space using circular linkedlist concept

// public class Solution {
//     public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
//         //if any one of is Null
        
//         if(headA==null||headB==null) return null;
        
        
//         ListNode a=headA;
//         ListNode b= headB;
//         while(a!=b){
//             a=a==null? headB : a.next;
//              b=b==null? headA : b.next;
//         }
//         return a;
        
//     }
// }
