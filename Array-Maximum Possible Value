Given two arrays A[] and B[] of same length N. There are N types of sticks of lengths specified. Each stick of length A[i] is present in B[i] units (i=1 to N). You have to construct the squares and rectangles using these sticks. Each unit of a stick can be used as length or breadth of a rectangle or as a side of square. A single unit of a stick can be used only once.

Let S be the sum of lengths of all sticks that are used in constructing squares and rectangles. The task is to calculate the maximum possible value of S.

Note: The element in array A[] is always unique.

Example 1:

Input:
N = 4
A[] = {3,4,6,5}
B[] = {2,3,1,6}
Output: 
38
Explanation: 
There are 2 sticks of length 3.
There are 3 sticks of length 4.
There is a 1 stick of length 6.
There are 6 sticks of length 5.
One square can be made using 4 sticks of
4th kind (5*4=20)
A rectangle can be made using 2 sticks of 
4th kind and 2 sticks of 2nd kind (5*2+4*2=18)
S = 20 + 18 = 38

Example 2:

Input:
N = 1
A[] = {3}
B[] = {2}
Output: 
0
Explanation: 
There are only 2 sticks of length 3 which are 
not enough to make the square or rectangle.
Your Task: 
You don't need to read input or print anything. Complete the function maxPossibleValue( ) which takes the integer N, the array A[], and the array B[] as input parameters and returns the maximum possible value of S. 

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)

Constraints:
1 ≤ N ≤ 106
1 ≤ A[] ≤ 106
1 ≤ B[] ≤ 102






//User function Template for Java
class Solution 
{ long maxPossibleValue(int N, int A[] ,int B[]) { 
        // code here
        // Initialize a variable to store the minimum length of all sticks
    int minLen = Integer.MAX_VALUE;
    // Initialize a variable to store the total length of all sticks used in squares/rectangles
    long totalLen = 0;
    // Initialize a variable to store the total count of sticks used in squares/rectangles
    long totalCount = 0;
    
    // Loop through all the sticks
    for(int i = 0; i < N; i++) {
    //check if number of sticks is greater than 1 , then that stick can be included
    if(B[i]>1){
        // Calculate the maximum number of squares/rectangles that can be made with the current stick
        int maxCount = B[i] / 2;
        // Calculate the total length of all sticks used in squares/rectangles with the current stick
        totalLen += maxCount * 2 * A[i];
        // Increment the total count of sticks used in squares/rectangles with the current stick
        totalCount += maxCount;
         // If the current stick length is less than the minimum length, update the minimum length
        if(A[i] < minLen) {
            minLen = A[i];
        }
    }
    }
    
    // If the total count of sticks used in squares/rectangles is not a multiple of 4,
    // remove the length of two sticks with minimum length
    if(totalCount %2==1) {
        totalLen -= minLen * 2;
    }
    
    // Return the total length of all sticks used in squares/rectangles
    return totalLen;

    }
} 
