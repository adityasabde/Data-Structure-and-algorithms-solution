Given a positive integer n, find the pivot integer x such that:

The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.
Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.

 

Example 1:

Input: n = 8
Output: 6
Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.


class Solution {
    public int pivotInteger(int n) {
        if(n == 1){
            return 1;
        }
          // int sum = 0;
//         for(int i =1 ;i<n;i++){
//             sum += i;
//         }
       
//         int idx = -1;
//         int ans = 0;
        
//         for(int i =1;i<n;i++){
//             ans  = ans + i;
//             sum = sum - i;
//              System.out.println(sum + " " + ans);
//             if(sum == ans){
//                 idx = i;
//                 break;
//             }
//         }
        int i =2 ;
        int j =n-1;
        int sum = 1;
        int sum2 = n;
        int idx = -1;
        System.out.println(sum + " " + sum2);
        while(i<j){
            if(sum < sum2){
                sum += i;
                i++;
            }
            else if(sum2 < sum ){
                sum2 += j;
                j--;
            }
            else if(sum == sum2 && i != j){
                sum2 += j;
                 sum += i;
                 i++;
                j--;
                
            }else if(sum == sum2 && i == j){
                break;
            }
             // System.out.println(sum + " " + i + " "+ j + " " + sum2);
        }
         System.out.println(sum + " " + sum2);
        if( sum != sum2 || sum == n ||i!=j ){
            return -1;
        }
        return i;
    }
}
