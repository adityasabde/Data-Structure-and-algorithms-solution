There is an integer array nums that consists of n unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in nums.

You are given a 2D integer array adjacentPairs of size n - 1 where each adjacentPairs[i] = [ui, vi] indicates that the elements ui and vi are adjacent in nums.

It is guaranteed that every adjacent pair of elements nums[i] and nums[i+1] will exist in adjacentPairs, either as [nums[i], nums[i+1]] or [nums[i+1], nums[i]]. The pairs can appear in any order.

Return the original array nums. If there are multiple solutions, return any of them.

 

Example 1:

Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.
Notice that adjacentPairs[i] may not be in left-to-right order.
Example 2:

Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.
Another solution is [-3,1,4,-2], which would also be accepted.
Example 3:

Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]
 






class Solution {
    ArrayList<Integer> list=new ArrayList<>();
    public int[] restoreArray(int[][] adjacentPairs) {
        Map<Integer,ArrayList<Integer>> map=new LinkedHashMap<>();
        for(int[] arr:adjacentPairs){
            if(map.containsKey(arr[0])){
                map.get(arr[0]).add(arr[1]);
            }else{
                map.put(arr[0],new ArrayList<>(Arrays.asList(arr[1])));
            }
            if(map.containsKey(arr[1])){
                map.get(arr[1]).add(arr[0]);
            }else{
                map.put(arr[1],new ArrayList<>(Arrays.asList(arr[0])));
            }
        }
        Set<Integer> vis=new HashSet<>();
        map.forEach((k,v)->{
            if(vis.contains(k)==false && v.size()==1){
                dfs(k,map,vis);
            }
        });
        int i=0;
        int[] ans=new int[map.size()];
        for(int item:list){
            ans[i++]=item;
        }
        return ans;
    }
    private void dfs(int s,Map<Integer,ArrayList<Integer>> map,Set<Integer> vis){
        vis.add(s);
        list.add(s);
        map.get(s).forEach(item->{
            if(!vis.contains(item)){
                dfs(item,map,vis);
            }
        });
    }
}
