class Solution {
    public int maxMoves(int[][] grid) {
        int max = 0;
        int dp[][] = new int[grid.length +1][grid[0].length + 1];
        for(int i =0 ;i<grid.length ;i++){
            Arrays.fill(dp[i] , -1);
        } 
        
        for(int i =0 ;i<grid.length ;i++){
            max = Math.max(max ,solve(grid, i , 0 , -1 , dp) -1 );
        }
        return max;
    }
    
    public int solve(int grid[][] , int i , int j ,int prev , int dp[][]){
        if(i >=grid.length || i <0 || j >= grid[0].length || prev >= grid[i][j]){
            return 0;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j] ;
        }
        
        int dx[] = {1 , 0 , -1};
        int dy[] = {1 , 1, 1,};
        
        int max = 0;
        for(int k =0 ;k<3 ;k++){
            max = Math.max(max , solve(grid , i + dx[k] , j + dy[k] , grid[i][j] , dp));
        }
                           
        return dp[i][j]= max + 1;                   
    }
}
