Given a binary grid of n*m. Find the distance of the nearest 1 in the grid for each cell.
The distance is calculated as |i1  - i2| + |j1 - j2|, where i1, j1 are the row number and column number of the current cell, and i2, j2 are the row number and column number of the nearest cell having value 1.
 

Example 1:

Input: grid = {{0,1,1,0},{1,1,0,0},{0,0,1,1}}
Output: {{1,0,0,1},{0,0,1,1},{1,1,0,0}}
Explanation: The grid is-
0 1 1 0 
1 1 0 0 
0 0 1 1 
0's at (0,0), (0,3), (1,2), (1,3), (2,0) and
(2,1) are at a distance of 1 from 1's at (0,1),
(0,2), (0,2), (2,3), (1,0) and (1,1)
respectively.


Example 2:

Input: grid = {{1,0,1},{1,1,0},{1,0,0}}
Output: {{0,1,0},{0,0,1},{0,1,2}}
Explanation: The grid is-
1 0 1
1 1 0
1 0 0
0's at (0,1), (1,2), (2,1) and (2,2) are at a 
distance of 1, 1, 1 and 2 from 1's at (0,0),
(0,2), (2,0) and (1,1) respectively.






class Solution
{
    class Pair{
        int x;
        int y ;
        Pair(int x , int y){
            this.x = x;
            this.y = y;
        }
    }
    
    //Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid)
    {
        int dx[] = new int[]{1 , -1 , 0 , 0};
        int dy[] = new int[]{0 , 0 , 1 , -1};
        
        int m = grid.length;
        int n = grid[0].length;
        
        int ans[][] = new int[m][n];
        
        // setting infinite in all blocks
        
        for(int i = 0 ; i<m ; i++){
            for(int j = 0 ; j<n; j++){
                ans[i][j] = Integer.MAX_VALUE;
            }
        }
        
        // setting 0 dis in ans matrix
         Queue<Pair> q = new LinkedList<>();
        
        for(int i = 0 ;i<m;i++){
            for(int j = 0 ;j<n ;j++){
                if(grid[i][j] == 1){
                    ans[i][j] = 0;
                    q.add(new Pair(i , j));
                }
            }
        }
        
        // Applying bfs
       
        while(!q.isEmpty()){
            Pair curr = q.poll();
            for(int i =0 ;i<4 ;i++){
                int newx = curr.x + dx[i];
                int newy = curr.y + dy[i];
                
                if(newx >=0 && newx<m && newy >=0 && newy<n && ans[newx][newy] > ans[curr.x][curr.y]){
                    ans[newx][newy] = ans[curr.x][curr.y]  +1 ;
                
                    q.add(new Pair(newx , newy));
                }
            }
        }
        
        return ans;
    }
}
