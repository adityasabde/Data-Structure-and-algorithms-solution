Input:
      1
    /  \
   3    2
Output:
3 1 2 
2 1 3 
Explanation: DLL would be 3<=>1<=>2



class Solution
{
    //Function to convert binary tree to doubly linked list and return it.
    Node prev = null ;
    static Node head = null ;
    Node bToDLL(Node root)
    {
        // ArrayList<Integer> arr  = new ArrayList<>();
        // Node head = null;
        // addtree(arr,root);
        // for(int i = 0;i<arr.size();i++){
        //     head = create(head,arr.get(i));
        // }
        
        // return head;
        
        recurtree(root);
        return head;
        
    }
    
    public void recurtree(Node root){
        if(root == null){
            return;
        }
        
        bToDLL(root.left);
        
        if(prev == null) head = root;
	    else{
	        root.left = prev;
	        prev.right = root;
	    }
	    prev = root;
	    bToDLL(root.right);
    }
    
    // public void addtree( ArrayList<Integer>arr,Node root){
    //     if(root == null){
    //         return;
    //     }
    //     addtree(arr,root.left);
    //     arr.add(root.data);
    //     addtree(arr,root.right);
    // }
    
    // public Node create(Node l , int data){
    //     Node n = new Node(data);
        
    //     if(l == null){
    //         l = n;
    //     }else{
    //         Node k =  l;
    //         while(k.right != null){
    //             k = k.right;
    //         }
    //         k.right = n;
    //         n.left = k;
    //     }
        
    //     return l;
    // }
}
