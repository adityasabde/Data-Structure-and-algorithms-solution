You are given two 0-indexed binary strings s and target of the same length n. You can do the following operation on s any number of times:

Choose two different indices i and j where 0 <= i, j < n.
Simultaneously, replace s[i] with (s[i] OR s[j]) and s[j] with (s[i] XOR s[j]).
For example, if s = "0110", you can choose i = 0 and j = 2, then simultaneously replace s[0] with (s[0] OR s[2] = 0 OR 1 = 1), and s[2] with (s[0] XOR s[2] = 0 XOR 1 = 1), so we will have s = "1110".

Return true if you can make the string s equal to target, or false otherwise.




class Solution {
    public boolean makeStringsEqual(String s, String target) {
        char ch1[] = s.toCharArray();
        char ch2[] = target.toCharArray();
        
        if(s.equals(target))return true;
        
        boolean f1 = false , f2 = false;
        
        for(int i =0 ;i<s.length(); i++){
            if(ch1[i] == '1') f1 = true;
            
            if(ch2[i] == '1') f2 = true;
        }
        
        if(f1 && f2) return true;
        return false;
    }

    
    
}
