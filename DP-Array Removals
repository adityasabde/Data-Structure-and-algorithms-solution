Given an array arr[] of size N and an integer K. The task is to find the minimum number of elements that should be removed, such that Amax-Amin<=K. After the removal of elements, Amax and Amin is considered among the remaining elements. 

Note: Can you solve the probelm without using any extra space and O(N*log(N)) time complexity?


Input: N = 9, K = 4  
arr[] = {1,3,4,9,10,11,12,17,20}
Output: 5
Explanation: Remove 1, 3, 4 from beginning
and 17, 20 from the end.



class Solution {
    // int dp[][] = new int[1001][1001];
    int removals(int[] arr, int n, int k) {
        // Arrays.sort(arr);
        // for(int i =0 ;i<n;i++){
        //     Arrays.fill(dp[i],-1);
        // }
        
        // int ans  = func(arr, 0 , n-1 ,k);
        // return ans
        int count =Integer.MAX_VALUE;
        Arrays.sort(arr);
        int i =0;
        while(i<n){
             int x = BS(arr, arr[i] , i, n-1 , k);
            //  System.out.println(i + " " + x);
             count = Math.min(count , n-(x-i+1));
        
            i++;
        }
        return count;
    }
    
    int BS(int arr[] , int x , int i  ,int j ,  int k){
        int ans =i;
        while(i<j){
            int mid = (i+j)/2;
            // System.out.println(arr[mid]);
            if(arr[mid] < x+k){
                ans = mid;
                i = mid + 1;
            }
            if(arr[mid] == x + k){
                return mid;
            }
            if(arr[mid] > x+k){
                j = mid;
            }
        }
        return ans;
    }
    
    // int func(int arr[] , int i , int j , int k ){
    //     if(i>=j){
    //         return 0;
    //     }
    //     if(arr[j] - arr[i] <= k){
    //         return 0;
    //     }
        
    //     if(dp[i][j] != -1){
    //         return dp[i][j];
    //     }
    //     dp[i][j] =  1 + Math.min(func(arr, i+1 , j , k), func(arr, i, j-1 , k));
    //     return dp[i][j];
    // }
}
