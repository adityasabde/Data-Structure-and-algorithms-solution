You are given the root of a binary tree. We install cameras on the tree nodes where each camera at a node can monitor its parent, itself, and its immediate children.

Return the minimum number of cameras needed to monitor all nodes of the tree.

 

Example 1:


Input: root = [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.
Example 2:


Input: root = [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.











/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int moniter = 1 ;
    int is_camera = 0;
    int need_camera = -1;
    int count = 0;
    public int minCameraCover(TreeNode root) {
        int rootcamerainfo = cameraNodeInfo(root);

        if(rootcamerainfo == need_camera) return count +1 ;

        return count;
    }

    public int cameraNodeInfo(TreeNode root){
        if(root == null) return moniter;

        int left = cameraNodeInfo(root.left);
        int right = cameraNodeInfo(root.right);

        if((left == need_camera) || (right == need_camera)){
            count++;
            return is_camera;
        }
        else if(left == is_camera || right == is_camera) return moniter;
        return need_camera;
    }

}
