##method 1

class Solution
{
   // arr[]: Input Array
   // N : Size of the Array arr[]
   //Function to count inversions in the array.
   static long inversionCount(long arr[], long n)
   {
       int inv_count = 0;
        for (int i = 0; i<n-1 ; i++)
            for (int j = i+1; j<n; j++)
                if (arr[i] > arr[j])
                    inv_count++;

        return inv_count;
   }
}



##method 2

class Solution
{
   // arr[]: Input Array
   // N : Size of the Array arr[]
   //Function to count inversions in the array.
   static long inversionCount(long arr[], long N)
   {
       // Your Code Here
     long[] temp= new long[arr.length];
     long ans=findmerging(arr,temp,0,arr.length-1);
     return ans;
   }
   public static long findmerging(long[] arr, long[] temp, int left, int right)
   {
       int mid=0;
       long cnt=0;
       
       if(right>left)
       {
           mid=(left+right)>>1;
           cnt+=findmerging(arr,temp,left,mid);
           cnt+=findmerging(arr,temp,mid+1,right);
           cnt+=merge(arr,temp,left,mid+1,right);
       }
       return cnt;
   }
   public static long merge(long[] arr, long[] temp, int left, int mid, int right)
   {
       int i,j,k;
       long cnt=0;
       i=left;
       j=mid;
       k=left;
       
       while((i<=mid-1) && (j<=right))
       {
           if(arr[i]<=arr[j])
           {
               temp[k++]=arr[i++];
           }
           else
           {
                temp[k++]=arr[j++];
                cnt+=(mid-i);
           }
       }
       
       while(i<=mid-1)
       {
           temp[k++]=arr[i++];
       }
       
       while(j<=right)
       {
            temp[k++]=arr[j++];
       }
        for(i=left;i<=right;i++)
      {
          arr[i]=temp[i];
      }
       
       return cnt;
   }
}




##method 3 

class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        // ArrayList <Integer> a = new ArrayList<>();
        // int x=0;
        long count =0;
    //   while(count != 0){
           for(int j=1 ; j<N;j++){
               if(arr[j-1] > arr[j] ){
                //   System.out.println("arr[j] = "+arr[j]);
                //   System.out.println("arr[j-1] = "+arr[j-1]);
                   long temp;
                   count++;
                //   a.add(1);
                   temp = arr[j];
                   arr[j] = arr[j-1];
                   arr[j-1] = temp;
                   j=0;
               }else{
                   continue;
               }   
           }
           
    //   }
    //   int j=0;
    //   while(j<a.size()){
    //       x = x+a.get(j);
    //       j++;
    //   }
    //   Long l= new Long(i);
       return count;
    }
}
