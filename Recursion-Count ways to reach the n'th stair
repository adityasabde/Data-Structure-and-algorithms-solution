There are n stairs, a person standing at the bottom wants to reach the top. The person can climb either 1 stair or 2 stairs at a time. Count the number of ways, the person can reach the top (order does matter).









class Solution
{
    //Function to count number of ways to reach the nth stair.
    int countWays(int n)
    {
        // ArrayList <String> ans = new ArrayList<>();
        
         if(n==1)

            return 1;

        else if(n==2)

            return 2;

        else{

            int prev=1;

            int next=2;

            int i=3;

            int res=1;

            while(i<=n){

                res=(prev+next)%1000000007;

                prev=next;

                next=res;

                i++;

            }

            return res;
        
        // int ans = stair(n,0);
        // return ans;
    }
    
    // public int stair(int n,int count){
    //     if(n == 1){
    //         return 1;
    //     }
    //     if(n == 2){
    //         return 2;
    //     }
        
    //     // ArrayList <String> phase1 = stair(n - 1);
    //   int count1 =  stair(n - 1, count);
    //     // ArrayList <String> phase2 = stair(n - 2);
    //     int count2 =  stair(n - 2,count); 
        
    //     // ArrayList <String> phase3 = new ArrayList<>();
        
    //     // for(String s : phase1){
    //     //     phase3.add('1'+s);
    //     // }
        
    //     // for(String s : phase2){
    //     //     phase3.add('2'+s);
    //     // }
        
    //   return count1 + count2; 
    }
}

