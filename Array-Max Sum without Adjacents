Given an array Arr of size N containing positive integers. Find the maximum sum of a subsequence such that no two numbers in the sequence should be adjacent in the array.

Example 1:

Input:
N = 6
Arr[] = {5, 5, 10, 100, 10, 5}
Output: 110
Explanation: If you take indices 0, 3
and 5, then Arr[0]+Arr[3]+Arr[5] =
5+100+5 = 110.
 

Example 2:

Input:
N = 4
Arr[] = {3, 2, 7, 10}
Output: 13
Explanation: 3 and 10 forms a non
continuous  subsequence with maximum
sum.






//User function Template for Java

class Solution {
    int findMaxSum(int arr[], int n) {
        int dp [] = new int[n];
        Arrays.fill(dp , -1);  
        return func(arr , n-1 , dp);
    }
    
    int func(int arr[] , int n , int dp[]){
        
        if(n < 0 ){
            return 0;
        }
        
        if(n == 0) return arr[n];
        
        if(dp[n] != -1) return dp[n];
        
        int sum1 = func( arr , n-2 , dp ) + arr[n];
        int sum2 = func( arr , n-1 , dp );
        
        return dp[n] = Math.max(sum1 , sum2);
    } 
}
