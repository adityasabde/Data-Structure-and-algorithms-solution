class Solution{
    static int minJumps(int[] arr){
        int n = arr.length;
      int d = n-1;
        for(int i=n-2;i>-1;i--){
            if(i + arr[i] >= d){
                d = i;
            }
        }
        if(d !=0){
            return -1;
        }
        // if (arr.length <= 1)
        //     return 0;
    
        // if(arr[0] == 0){
        //     return -1;
        // }
        
        //calculate the number of jumps to the end of the array when its possible
        int l = 0 , r = 0;
        int jumps = 0;
        while(r < n - 1){
            jumps++;
            int max_jump = 0;
            for(int i=l;i<=r;i++){
                max_jump = Math.max(max_jump , arr[i] + i);
            }
            l = r + 1;
            r = max_jump;
        }
        return jumps;

    }
}





second approch ----------------------------------------------------------------------------------------------------------------------------------------------------------

class Test {
    static int minJumps(int arr[])
    {
        if (arr.length <= 1)
            return 0;

        // Return -1 if not possible to jump
        if (arr[0] == 0)
            return -1;

        // initialization
        int maxReach = arr[0];
        int step = arr[0];
        int jump = 1;

        // Start traversing array
        for (int i = 1; i < arr.length; i++) {
            // Check if we have reached 
// the end of the array
            if (i == arr.length - 1)
                return jump;

            // updating maxReach
            maxReach = Math.max(maxReach, i + arr[i]);

            // we use a step to get to the current index
            step--;

            // If no further steps left
            if (step == 0) {
                // we must have used a jump
                jump++;

                // Check if the current 
// index/position or lesser index
                // is the maximum reach point 
// from the previous indexes
                if (i >= maxReach)
                    return -1;

                // re-initialize the steps to the amount
                // of steps to reach maxReach from position i.
                step = maxReach - i;
            }
        }

        return -1;
    }
