You are given an array of events where events[i] = [startDayi, endDayi]. Every event i starts at startDayi and ends at endDayi.

You can attend an event i at any day d where startTimei <= d <= endTimei. You can only attend one event at any time d.

Return the maximum number of events you can attend.

 

Example 1:


Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.
One way to attend them all is as shown.
Attend the first event on day 1.
Attend the second event on day 2.
Attend the third event on day 3.
Example 2:

Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4



class Solution {
 public int maxEvents(int[][] events) {
        Arrays.sort(events, Comparator.comparingInt(eventStartDay -> eventStartDay[0]));
        int maxEventsThatCanBeAttended = 0, i = 0, numberOfEvents = events.length;
        // The default PriorityQueue is implemented with Min-Heap, that is the top element is the minimum one in the heap.
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        for (int day = 1; day <= 100000; day++) {

            // Store end dates in a priority queue if start date == day
            while (i < numberOfEvents && events[i][0] == day){
                    minHeap.add(events[i++][1]);
            }

            // Remove from queue if the event is over
            while(!minHeap.isEmpty() && minHeap.peek() < day){
                minHeap.poll();
            }

            // Be greedy and use day to attend to the event that closes earlier
            // which is at the head of the queue
            if(!minHeap.isEmpty()){
                maxEventsThatCanBeAttended++;
                // Removes the head of this queue
                minHeap.poll();
            }
        }
        return maxEventsThatCanBeAttended;
    }
}
