You are given an integer array nums of length n, and an integer array queries of length m.

Return an array answer of length m where answer[i] is the maximum size of a subsequence that you can take from nums such that the sum of its elements is less than or equal to queries[i].

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,5,2,1], queries = [3,10,21]
Output: [2,3,4]
Explanation: We answer the queries as follows:
- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.
- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.
- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.
Example 2:

Input: nums = [2,3,4,5], queries = [1]
Output: [0]
Explanation: The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.










class Solution {
    public int[] answerQueries(int[] nums, int[] queries) {
        Arrays.sort(nums);
        int[] ans=new int[queries.length];
        for(int i=0;i<queries.length;i++)
        {
            int sum=0;
            for(int j=0;j<nums.length;j++)
            {
                sum+=nums[j];
                if(sum>queries[i])
                {
                    ans[i]=j;
                    break;
                }
                if(j==nums.length-1 && sum<=queries[i])
                    ans[i]=j+1;
            }
        }
        return ans;
    }
}





// class Solution {
//     public int[] answerQueries(int[] nums, int[] queries) {
//         int ans [] = new int [queries.length];
//         int dp[] = new int [nums.length];
//         Arrays.fill(dp , -1);
//          for(int i =0 ;i<queries.length;i++)
//          {
//              ans[i] = subsequence(nums , queries[i] , 0 , 0 , 0 , dp);
//          }
//          return ans;
//     }

    // public int subsequence(int nums[] , int target , int i ,int sum , int count , int dp[]){
    //     if(i == nums.length){
    //         if(sum <= target){
    //             return count;
    //         }
    //         return 0; 
    //     }
    //     if(dp[i] != -1)return dp[i];

    //     int x =  subsequence(nums , target , i+1 , sum+nums[i] , count + 1 , dp);
    //     int y = subsequence(nums, target , i+1 , sum , count , dp);

    //     return dp[i] = Math.max(x , y); 
    // }
// }
