Given an array of integers arr, you are initially positioned at the first index of the array.

In one step you can jump from index i to index:

i + 1 where: i + 1 < arr.length.
i - 1 where: i - 1 >= 0.
j where: arr[i] == arr[j] and i != j.
Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.

 

Example 1:

Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.
Example 2:

Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You do not need to jump.
Example 3:

Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.
 

Constraints:

1 <= arr.length <= 5 * 104
-108 <= arr[i] <= 108











class Solution {
    public int minJumps(int[] arr) {
        int steps=0;
        int  n=arr.length;
        HashMap<Integer,List<Integer>> hm=new HashMap<>();
        for(int i=0;i<arr.length;i++){
            if(!hm.containsKey(arr[i])){
                List<Integer> temp =new ArrayList<>();
                temp.add(i);
                hm.put(arr[i],temp);
            }
            else{
                List<Integer> temp=hm.get(arr[i]);
                temp.add(i);
                hm.put(arr[i],temp);
            }
        }
        boolean vis[]=new boolean[n];
        vis[0]=true;
        Queue<Integer> qu=new LinkedList<>();
        qu.add(0);
        while(!qu.isEmpty()){
            int size=qu.size();
            for(int i=0;i<size;i++){
                int curridx=qu.poll();
                if(curridx==n-1)
                    return steps;
                List<Integer> jumptoindexes=hm.get(arr[curridx]);
                jumptoindexes.add(curridx+1);
                jumptoindexes.add(curridx-1);
                for(int q:jumptoindexes){
                    if(q>=0 && q<n && !vis[q]){
                        vis[q]=true;
                        qu.add(q);
                    }
                }
                jumptoindexes.clear();
            }
            steps++;
        }
        return -1;
    }
}
