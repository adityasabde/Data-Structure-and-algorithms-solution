There is a carpet of a size a*b [length * breadth]. You are given a box of size c*d. The task is, one has to fit the carpet in the box in a minimum number of moves. 

In one move, you can either decrease the length or the breadth of the carpet by half (floor value of its half).

Note: One can even turn the carpet by 90 degrees any number of times, wont be counted as a move.

 

Example 1:

Input:
A = 8, B = 13
C = 6, D = 10
Output:
Minimum number of moves: 1
Explanation:
Fold the carpet by breadth, 13/2 i.e. 6, 
so now carpet is 6*8 and can fit fine.
 

Example 2:

Input:
A = 4, B = 8
C = 3, D = 10
Output:
Minimum number of moves: 1
Explanation: Fold the carpet by length , 4/2 i.e. 2,
so now carpet is 2*8 and can fit fine.








class Solution{
    int carpetBox(int a, int b, int c, int d) { 
         int x = a;
         int y = b;
         int count = 0;
         while(x > c || y > d)
         {
             if(x > c )
             {
                 count++;
                 x /= 2;
             }
             if(y > d)
             {
                 count++;
                 y /= 2;
             }
             
         }
         int prev = count;
         count = 0;
         
         x = b ; y = a;
         while(x > c || y> d)
         {
              if(x > c )
             {
                 count++;
                 x /= 2;
             }
             if(y > d)
             {
                 count++;
                 y /= 2;
             }
         }
        
        return Math.min(count , prev);
    }
   
}
