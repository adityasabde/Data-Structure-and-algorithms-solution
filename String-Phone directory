Given a list of contacts contact[] of length n where each contact is a string which exist in a phone directory and a query string s. The task is to implement a search query for the phone directory. Run a search query for each prefix p of the query string s (i.e. from  index 1 to |s|) that prints all the distinct contacts which have the same prefix as p in lexicographical increasing order. Please refer the explanation part for better understanding.
Note: If there is no match between query and contacts, print "0".


Input: 
n = 3
contact[] = {"geeikistest", "geeksforgeeks", 
"geeksfortest"}
s = "geeips"
Output:
geeikistest geeksforgeeks geeksfortest
geeikistest geeksforgeeks geeksfortest
geeikistest geeksforgeeks geeksfortest
geeikistest
0
0
Explaination: By running the search query on 
contact list for "g" we get: "geeikistest", 
"geeksforgeeks" and "geeksfortest".
By running the search query on contact list 
for "ge" we get: "geeikistest" "geeksforgeeks"
and "geeksfortest".
By running the search query on contact list 
for "gee" we get: "geeikistest" "geeksforgeeks"
and "geeksfortest".
By running the search query on contact list 
for "geei" we get: "geeikistest".
No results found for "geeip", so print "0". 
No results found for "geeips", so print "0".



class Solution{
    static ArrayList<ArrayList<String>> displayContacts(int n, 
                                        String contact[], String s)
    {
       HashSet<String> set = new LinkedHashSet<>();
       for(int i =0 ; i<n ;i++){
           set.add(contact[i]);
       }
       
       
        ArrayList<ArrayList<String>> arr = new ArrayList<>();
        String ans = "";
        char ch [] = s.toCharArray();
        
        for(int i =0 ; i<ch.length;i++){
            ans += ch[i];
             ArrayList<String> sec = new ArrayList<>();
            for(String str : set ){
               
                if(str.contains(ans)){
                    sec.add(str);
                }
            }
            if(sec.size()==0){
                sec.add("0");
            }
            Collections.sort(sec);
            arr.add(sec);
        }
        
        return arr;
    }
}
