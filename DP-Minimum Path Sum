Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.

 

Example 1:


Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.
Example 2:

Input: grid = [[1,2,3],[4,5,6]]
Output: 12
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
0 <= grid[i][j] <= 100






class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;

        int[][] dp = new int[m][n];

        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(i == 0 && j == 0)
                    dp[i][j] = grid[i][j];
                else {
                    // dp[i][j] = grid[i][j] + Minimum of (top, left)
                    
                    int top = Integer.MAX_VALUE, left = Integer.MAX_VALUE;
                    if(i - 1 >= 0)
                        top = dp[i-1][j];
                    if(j - 1 >= 0)
                        left = dp[i][j-1];
                    dp[i][j] = grid[i][j] + Math.min(top, left);
                }
            }
        }
        return dp[m-1][n-1];
    }
}
