Given a binary tree, print the bottom view from left to right.
A node is included in bottom view if it can be seen when we look at the tree from bottom.

                      20
                    /    \
                  8       22
                /   \        \
              5      3       25
                    /   \      
                  10    14

For the above tree, the bottom view is 5 10 3 14 25.
If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal. For example, in the below diagram, 3 and 4 are both the bottommost nodes at horizontal distance 0, we need to print 4.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree the output should be 5 10 4 14 25.
 

Example 1:

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation:
First case represents a tree with 3 nodes
and 2 edges where root is 1, left child of
1 is 3 and right child of 1 is 2.

Thus nodes of the binary tree will be
printed as such 3 1 2.










class Solution
{
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    { 
        Queue <Pair> q = new LinkedList<>();
        ArrayList<Integer> arr = new ArrayList<>();
        Map<Integer , Integer> map = new TreeMap<>();
        
        q.add(new Pair( 0 , root));
        
        while(!q.isEmpty()){
            Pair p = q.poll();
         
            map.put(p.hd , p.n.data);
        
            
            if(p.n.left != null){
                q.add(new Pair(p.hd -1 , p.n.left));
            }
            
            if(p.n.right != null){
                q.add(new Pair(p.hd +1 ,p.n.right));
            }
            
        }
        
        for(Map.Entry<Integer , Integer> entry : map.entrySet()){
            arr.add(entry.getValue());
        }
        
        return arr;
        
    }
    
    class Pair{
        int hd;
        Node n;
        Pair(int hd , Node n){
            this.hd = hd ;
            this.n = n;
        }
    }
}
