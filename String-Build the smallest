
Given a number k and string num of digits (0 to 9) denoting a positive integer. Find a string denoting the lowest integer number possible by removing k digits from num, without changing their order.
Note: num will not contain any leading zero.

 

Example 1:

Input:
k = 2
num = "143729"
Output: "1329"
Explanation: 1329 is the minimum number
possible after removing '4' and '7'.
 

Example 2:

Input:
k = 3
num = "10056"
Output: "0"
Explanation: 0 is the minimum number
possible after removing '1' , '5' and '6'.
 

Your Task:  
You dont need to read input or print anything. Complete the function buildLowestNumber() which accepts string num and integer k as input parameters and returns a string denoting the smallest integer possible after removing k digits from num without changing the order.








//User function Template for Java

class Solution {
    static String buildLowestNumber(String str, int k) {
        Stack<Character> st = new Stack<>();
        char ch[] = str.toCharArray();
        for(int i = 0 ;i<str.length();i++){
            if(st.isEmpty()){
                st.push(ch[i]);
            }else{
                while(k> 0 && !st.isEmpty() && (st.peek() > ch[i]) ){
                    st.pop();
                    k--;
                }
                st.push(ch[i]);
            }
        }
        
        while(k>0 && !st.isEmpty()){
            st.pop();
        }
        
        
        StringBuilder s = new StringBuilder();
        while(!st.isEmpty()){
            s.append(st.pop());
        }
        s.reverse();
        
        String s1 = s.toString();
    
        for(int i=0;i<s1.length();i++) {
            if(s1.charAt(i)!='0') return s1.substring(i);
        }
       
        return "0";
    }
}


