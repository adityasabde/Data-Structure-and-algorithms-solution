Given N non-negative integers a1,a2,....an where each represents a point at coordinate (i, ai). N vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i,0). Find two lines, which together with x-axis forms a container, such that it contains the most water.

Note : In Case of single verticle line it will not be able to hold water.

Example 1:

Input:
N = 4
a[] = {1,5,4,3}
Output: 6
Explanation: 5 and 3 are distance 2 apart.
So the size of the base = 2. Height of
container = min(5, 3) = 3. So total area
= 3 * 2 = 6.
Example 2:

Input:
N = 5
a[] = {3,1,2,4,5}
Output: 12
Explanation: 5 and 3 are distance 4 apart.
So the size of the base = 4. Height of
container = min(5, 3) = 3. So total area
= 4 * 3 = 12.















class Solve{
    
    long maxArea(int a[], int len){
        // int pre [][] = new int [len][2];
        // int max = 0;
        // for(int i =0;i<len;i++){
        //     if(max <= a[i] ){
        //         max = a[i];
        //         pre[i][0] = max;
        //         pre[i][1] = i;
        //     }else{
        //         pre[i][0] = pre[i-1][0];
        //         pre[i][1] = pre[i-1][1];
        //     }
        // }
        
        
        // int max1 = 0;
        // int revpre [][] = new int[len][2];
        // for( int i = len-1 ; i >= 0 ; i-- ){
        //     if( max1 <= a[i] ){
        //         max1 = a[i];
        //         revpre[i][0] = max1;
        //         revpre[i][1] = i;
        //     }else{
        //         revpre[i][0] = revpre[i+1][0];
        //         revpre[i][1] =  revpre[i+1][1];
        //     }
        // }
        
        // // for(int i =0 ;i<len;i++){
        // //      System.out.println(revpre[i][0] + " " + revpre[i][1]);
        // // }
        
        // long maxarea = 0;
        
        // for(int i = 0 ; i < len ;i++){
        //     int length = Math.min(pre[i][0] , revpre[i][0]);
        //     int bred = revpre[i][1] - pre[i][1];
            
           
        //     maxarea = Math.max(maxarea , length*bred );    
        // }
        
        // return maxarea;
        
        long maxarea = 0 ;
        int i =0 ;
        int j = len -1;
        while(i<j){
            int x = a[i];
            int y = a[j];
            if(x < y){
                maxarea  = Math.max(maxarea , x * (j-i));
                i++;
            }
            else{
                maxarea  = Math.max(maxarea , y * (j-i));
                j--;
            }
        }
        return maxarea;
    }
    
}
