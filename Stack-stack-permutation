You are given two arrays A and B of unique elements of size N. Check if one array is a stack permutation of the other array or not.
Stack permutation means that one array can be created from another array using a stack and stack operations.

Example 1:

Input:
N = 3
A = {1,2,3}
B = {2,1,3}
Output:
1
Explanation:
1. push 1 from A to stack
2. push 2 from A to stack
3. pop 2 from stack to B
4. pop 1 from stack to B
5. push 3 from A to stack
6. pop 3 from stack to B


class Solution {
    public static int isStackPermutation(int n, int[] ip, int[] op) {
        //  int i =0 ;
        //  int j =0 ;
        //  int x =0 ;
        //  Stack<Integer> st = new Stack<>();
         
        //  while(j<n){
        //      while( i<n && st.isEmpty() || st.peek() != op[j] ){
        //          st.push(ip[i++]);
        //         //  i++;
        //          if(i>n-1){
        //              break;
        //          }
        //      }
             
        //      if(st.peek() == op[j] && !st.isEmpty()){
        //          st.pop();
        //          j++;
        //      }else{
        //          return x;
        //      }
        //  }
        // x =1;
        // return x;
        
        Stack<Integer> st = new Stack<>();
        
        int j = 0;
        
        for(int x : ip)
        {
            st.push(x);
            
            while(st.isEmpty()==false && st.peek()==op[j])
            {
                st.pop();
                j++;
            }
            
            
        }
        
        return j==n ? 1 : 0;  
    }
}
