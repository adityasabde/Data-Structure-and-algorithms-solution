
Given a linked list of characters and a string S.Return all the anagrams of the string present in the given linked list.In case of overlapping anagrams choose the first anagram from left.

Example 1:

Input: a -> b -> c -> a -> d -> b -> c -> a
S = bac
Output: [a -> b -> c, b -> c -> a]
Explanation: In the given linked list,
there are three anagrams: 
1. a -> b -> c -> a -> d -> b -> c -> a
2. a -> b -> c -> a -> d -> b -> c -> a
3. a -> b -> c -> a -> d -> b -> c -> a
But in 1 and 2, a -> b -> c and b -> c-> a
are ovelapping.So we take a -> b -> c as it
comes first from left.So the output is:
[a->b->c,b->c->a]
Example 2:

Input: a -> b -> d -> c -> a
S = bac
Output: -1 
Explanation: There is no anagrams, so output is -1
Your Task:
You don't need to read input or print anything. Your task is to complete the function findAnagrams() which takes head node of the linked list and a string S as input parameters and returns an array of linked list which only stores starting point of the Anagram. If there is no anagram in the linked list,return -1.


Expected Time Complexity: O(N), where N is length of LinkedList
Expected Auxiliary Space: O(1)








class Solution {
    public static Node createList(Node low, Node high){
        Node newList=new Node(' ');
        Node newListHead=newList;
        
        Node temp=low;
        while(temp!=high){
            char curr=temp.data;
            
            newList.next=new Node(curr);
            newList=newList.next;
            
            temp=temp.next;
        }
        
        return newListHead.next;
    }
    public static ArrayList<Node> findAnagrams(Node head, String s) {
        int savedTime=0;
        int time=1;
        int n=s.length();
        Map<Character, Integer> map=new HashMap<>();
        
        //store original string freq
        for(int i=0; i<n; i++){
            char curr=s.charAt(i);
            map.put(curr, map.getOrDefault(curr, 0) + 1);
        }
        
        Node low=head;
        Node high=head;
        Map<Character, Integer> currMap=new HashMap<>();
        ArrayList<Node> res=new ArrayList<>();
        
        //store initial freq
        int i=0;
        while(high!=null && i<n){
            char curr=high.data;
            
            //store into map
            currMap.put(curr, currMap.getOrDefault(curr, 0) + 1);
            
            high=high.next;
            i++;
            time++;
        }
        
        //check
        if(map.equals(currMap) && ((time-savedTime)>=n)){
            savedTime=time;
            //save
            Node list=createList(low, high);
            res.add(list);
        }
        
        //logic
        while(high!=null){
            char prev=low.data;
            char curr=high.data;
            
            //acquire
            currMap.put(curr, currMap.getOrDefault(curr, 0) + 1);
            
            //release
            if(currMap.get(prev)==1 ){
                currMap.remove(prev);
            }
            else{
                currMap.put(prev, currMap.get(prev) - 1);
            }
            
            //inc ptrs
            low=low.next;
            high=high.next;
            time++;
            
            //check
            if(map.equals(currMap) && ((time-savedTime)>=n)){
                savedTime=time;
                //save
                Node list=createList(low, high);
                res.add(list);
            }
            
        }
        
        return res;
    }
}
