
Input:
N = 7, K = 4
A[] = {1,2,1,3,4,2,3}
Output: 3 4 4 3
Explanation: Window 1 of size k = 4 is
1 2 1 3. Number of distinct elements in
this window are 3. 
Window 2 of size k = 4 is 2 1 3 4. Number
of distinct elements in this window are 4.
Window 3 of size k = 4 is 1 3 4 2. Number
of distinct elements in this window are 4.
Window 4 of size k = 4 is 3 4 2 3. Number
of distinct elements in this window are 3.





class Solution
{
    ArrayList<Integer> countDistinct(int A[], int n, int k)
    {
        ArrayList<Integer> arr = new ArrayList<>();
        HashMap<Integer,Integer> map = new HashMap<>();
        // int y = k;
        // for(int i =0 ;i<n-k+1;i++){
        //   int j =i;
        //   while(j<i+k){
        //      if(y >0){
        //         set.add(A[j]);
        //         y--;
        //       }
        //       j++;
        //   }
        //         y = k;
        //         arr.add(set.size());
        //         // System.out.println(set);
        //         set.removeAll(set);
        // }
        // return arr;
        for(int i =0 ;i<k;i++){
            if(map.containsKey(A[i])){
                map.put(A[i],map.get(A[i])+1);
            }else{
                map.put(A[i],1);
            }
        }
        arr.add(map.size());
        for(int i =k ; i < n ; i++){
            
            if(map.get(A[i-k]) > 1){
                map.put(A[i-k],map.get(A[i-k])-1);
            }else{
                map.remove(A[i-k]);
            }
            
            if(map.containsKey(A[i])){
                map.put(A[i],map.get(A[i])+1);
            }else{
                map.put(A[i],1);
            }
        
            arr.add(map.size());
        }
        
        return arr;
    }
}

