Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.
Example 3:

Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 











class Solution {
    long ans = 0;
    public long zeroFilledSubarray(int[] nums) {
       int start= 0;
       int end = 0;
       int n = nums.length;
    //    first Approch
    //    subarray( 0 , 0 , nums );


    // Second Approch  
      long count = 0;
      int i = 0;     
      for(;i<n;i++){
          if(nums[i] == 0){
              count++;
          }
          else{
            //   System.out.println(count);
              ans += (count*(count + 1 ))/2;
              count = 0;
          }
      }
      if(nums[n-1] == 0){
         ans += ((count*(count + 1 ))/2);
      }     
       return ans;
    }

    void subarray(int start , int end , int nums[]){
        if(end >= nums.length){
            return;
        }
        else if(start > end){
            subarray(0 , end +1 , nums);
        }else{
            int flag = 0 ;
            for(int i = start ; i <= end ;i++){
                if(nums[i]!= 0){
                    flag= 1;
                    break;
                }
            }
            if(flag == 0){
                ans++;
            }
            subarray(start+1 , end , nums);
        }
    }
}
