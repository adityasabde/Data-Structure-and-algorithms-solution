Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true




class Solution {
    public boolean exist(char[][] board, String word) {
        for(int i =0 ;i<board.length;i++){
            for(int j =0; j<board[0].length;j++){
                if(board[i][j] == word.charAt(0) && dfs(board ,i,j,0,word)){
                    return true;
                }
            }
        }
        return false;
    }

    public boolean dfs(char ch[][] , int i , int j, int count , String word){
        if(count == word.length()){
            return true;
        }
        if(i == -1 || i == ch.length || j == -1 || j == ch[0].length || ch[i][j] != word.charAt(count)){
            return false;
        }
        char temp = ch[i][j];
        ch[i][j] = '*';
        boolean found = dfs(ch ,i+1 , j ,count+1,word) || 
                         dfs(ch , i-1 , j , count+1 , word) ||
                         dfs(ch , i ,j+1 , count+1,word) ||
                         dfs(ch ,i, j-1 , count +1 , word);

       ch[i][j] = temp;                  
       return found; 
    }

}
